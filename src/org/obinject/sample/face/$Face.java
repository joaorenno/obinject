package org.obinject.sample.face; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; public class $Face extends Face implements Entity<$Face> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Face.classId == null) {$Face.classId = Uuid.fromString("DA7CEF78-C294-42D2-0CD3-2E7073D82065"); }return $Face.classId; } public static final BTreeEntity<$Face> entityStructure = new BTreeEntity<$Face>(new File("build/classes/org/obinject/sample/face/face.dbo", 4096)){}; public static final BTree<UniqueOneFace> uniqueOneFaceStructure = new BTree<UniqueOneFace>(new File("build/classes/org/obinject/sample/face/face.dbo", 4096)){}; public static final MTree<FeatureOneFace> featureOneFaceStructure = new MTree<FeatureOneFace>(new File("build/classes/org/obinject/sample/face/face.dbo", 4096)){}; public static final Attribute<java.lang.String> label = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Face)entity).getLabel(); } }; public static final Attribute<java.awt.image.BufferedImage> face = new Attribute<java.awt.image.BufferedImage> (){ @Override public java.awt.image.BufferedImage valueOfAttribute(Entity entity) { return ((Face)entity).getFace(); } }; public $Face(){ this.uuid = Uuid.generator(); } public $Face(Face obj){ this.setLabel(obj.getLabel()); this.setFace(obj.getFace()); this.uuid = Uuid.generator(); } public $Face(Face obj, Uuid uuid){ this.setLabel(obj.getLabel()); this.setFace(obj.getFace()); this.uuid = uuid; } public $Face($Face obj){ this.setLabel(obj.getLabel()); this.setFace(obj.getFace()); this.uuid = obj.getUuid();; } public $Face(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Face obj) {  return (((this.getLabel() == null) && (obj.getLabel() == null)) || ((this.getLabel() != null) && (obj.getLabel() != null) && (this.getLabel().equals( obj.getLabel())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Face> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Face.find(this); if(uuidInject == null){ $Face.entityStructure.add(this); UniqueOneFace.uniqueOneFaceStructure.add(new UniqueOneFace(this, this.getUuid())); FeatureOneFace.featureOneFaceStructure.add(new FeatureOneFace(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Face.find(this); if(uuidReject != null){ UniqueOneFace.uniqueOneFaceStructure.remove(new UniqueOneFace(this, this.getUuid())); FeatureOneFace.featureOneFaceStructure.remove(new FeatureOneFace(this, this.getUuid())); $Face.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Face.find(this); $Face entityOld = $Face.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneFace uniqueOneFaceOld = new UniqueOneFace(entityOld, entityOld.getUuid()); UniqueOneFace uniqueOneFaceNew = new UniqueOneFace(this, entityOld.getUuid()); if(uniqueOneFaceOld.hasSameKey(uniqueOneFaceNew)){ $Face.uniqueOneFaceStructure.remove(uniqueOneFaceOld); $Face.uniqueOneFaceStructure.add(uniqueOneFaceNew); } FeatureOneFace featureOneFaceOld = new FeatureOneFace(entityOld, entityOld.getUuid()); FeatureOneFace featureOneFaceNew = new FeatureOneFace(this, entityOld.getUuid()); if(featureOneFaceOld.hasSameKey(featureOneFaceNew)){ $Face.featureOneFaceStructure.remove(featureOneFaceOld); $Face.featureOneFaceStructure.add(featureOneFaceNew); } this.uuid = uuidOld; $Face.entityStructure.remove(entityOld); $Face.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Face entity) { UniqueOneFace unique = new UniqueOneFace (entity, entity.getUuid()); return $Face.uniqueOneFaceStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Face.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setLabel(pull.pullString()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Face.classId); push.pushUuid(uuid); push.pushString(this.getLabel()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getLabel()); } static{ label.getSchemas().add( new Schema<$Face, UniqueOneFace, java.lang.String>() { @Override public $Face newEntity(java.lang.String value) { $Face obj = new $Face(); obj.setLabel(value); return obj; } @Override public UniqueOneFace newKey(java.lang.String value) { UniqueOneFace obj = new UniqueOneFace(); obj.setLabel(value); return obj; } @Override public EntityStructure<$Face> getEntityStructure() { return $Face.entityStructure; } @Override public KeyStructure<UniqueOneFace> getKeyStructure() { return UniqueOneFace.uniqueOneFaceStructure; } } ); face.getSchemas().add( new Schema<$Face, FeatureOneFace, java.awt.image.BufferedImage>() { @Override public $Face newEntity(java.awt.image.BufferedImage value) { $Face obj = new $Face(); obj.setFace(value); return obj; } @Override public FeatureOneFace newKey(java.awt.image.BufferedImage value) { FeatureOneFace obj = new FeatureOneFace(); obj.setFace(value); return obj; } @Override public EntityStructure<$Face> getEntityStructure() { return $Face.entityStructure; } @Override public KeyStructure<FeatureOneFace> getKeyStructure() { return FeatureOneFace.featureOneFaceStructure; } } ); } } 