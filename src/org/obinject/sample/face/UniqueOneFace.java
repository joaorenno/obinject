package org.obinject.sample.face; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneFace extends $Face implements Sort<UniqueOneFace>, Comparable<UniqueOneFace> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneFace.classId == null) {UniqueOneFace.classId = Uuid.fromString("EB370175-D91A-D9C5-6421-7408795BA613"); }return UniqueOneFace.classId; } public UniqueOneFace(){} public UniqueOneFace($Face obj){ super(obj); } public UniqueOneFace(Face obj, Uuid uuid){ super(obj, uuid); } public UniqueOneFace(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneFace obj) {  return (((this.getLabel() == null) && (obj.getLabel() == null)) || ((this.getLabel() != null) && (obj.getLabel() != null) && (this.getLabel().equals( obj.getLabel())))); } @Override public int compareTo(UniqueOneFace obj) { if (((this.getLabel() == null) || (this.getLabel() != null) && (obj.getLabel() != null) && (this.getLabel().compareTo( obj.getLabel()) < 0))) { return -1; } else if (((this.getLabel() == null) || (this.getLabel() != null) && (obj.getLabel() != null) && (this.getLabel().compareTo( obj.getLabel()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneFace> getKeyStructure() { return uniqueOneFaceStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setLabel(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getLabel()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getLabel()); } } 