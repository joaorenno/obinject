package org.obinject.sample.inception; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneSonhador extends $Sonhador implements Sort<UniqueOneSonhador>, Comparable<UniqueOneSonhador> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneSonhador.classId == null) {UniqueOneSonhador.classId = Uuid.fromString("E6D7CC97-AA20-9B41-BC5F-7DD81D4A82A2"); }return UniqueOneSonhador.classId; } public UniqueOneSonhador(){} public UniqueOneSonhador($Sonhador obj){ super(obj); } public UniqueOneSonhador(Sonhador obj, Uuid uuid){ super(obj, uuid); } public UniqueOneSonhador(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneSonhador obj) { return (this.getCodigo() == obj.getCodigo()); } @Override public int compareTo(UniqueOneSonhador obj) { if ((this.getCodigo() < obj.getCodigo())) { return -1; } else if ((this.getCodigo() == obj.getCodigo())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneSonhador> getKeyStructure() { return uniqueOneSonhadorStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setCodigo(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getCodigo()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 