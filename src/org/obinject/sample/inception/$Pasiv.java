package org.obinject.sample.inception; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Pasiv extends Pasiv implements Entity<$Pasiv> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Pasiv.classId == null) {$Pasiv.classId = Uuid.fromString("87B6405B-7B13-497E-E0C7-E27FC57F4590"); }return $Pasiv.classId; } public static final BTreeEntity<$Pasiv> entityStructure = new BTreeEntity<$Pasiv>(new File("build/classes/org/obinject/sample/inception/inception.dbo", 4096)){}; public static final BTree<UniqueOnePasiv> uniqueOnePasivStructure = new BTree<UniqueOnePasiv>(new File("build/classes/org/obinject/sample/inception/inception.dbo", 4096)){}; public static final Attribute<Integer> serial = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Pasiv)entity).getSerial(); } }; public static final Attribute<Float> quantidadeDroga = new Attribute<Float> (){ @Override public Float valueOfAttribute(Entity entity) { return ((Pasiv)entity).getQuantidadeDroga(); } }; public $Pasiv(){ this.uuid = Uuid.generator(); } public $Pasiv(Pasiv obj){ this.setSerial(obj.getSerial()); this.setQuantidadeDroga(obj.getQuantidadeDroga()); this.uuid = Uuid.generator(); } public $Pasiv(Pasiv obj, Uuid uuid){ this.setSerial(obj.getSerial()); this.setQuantidadeDroga(obj.getQuantidadeDroga()); this.uuid = uuid; } public $Pasiv($Pasiv obj){ this.setSerial(obj.getSerial()); this.setQuantidadeDroga(obj.getQuantidadeDroga()); this.uuid = obj.getUuid();; } public $Pasiv(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Pasiv obj) { return (this.getSerial() == obj.getSerial()) && (this.getQuantidadeDroga() == obj.getQuantidadeDroga()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Pasiv> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Pasiv.find(this); if(uuidInject == null){ $Pasiv.entityStructure.add(this); UniqueOnePasiv.uniqueOnePasivStructure.add(new UniqueOnePasiv(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Pasiv.find(this); if(uuidReject != null){ UniqueOnePasiv.uniqueOnePasivStructure.remove(new UniqueOnePasiv(this, this.getUuid())); $Pasiv.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Pasiv.find(this); $Pasiv entityOld = $Pasiv.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOnePasiv uniqueOnePasivOld = new UniqueOnePasiv(entityOld, entityOld.getUuid()); UniqueOnePasiv uniqueOnePasivNew = new UniqueOnePasiv(this, entityOld.getUuid()); if(uniqueOnePasivOld.hasSameKey(uniqueOnePasivNew)){ $Pasiv.uniqueOnePasivStructure.remove(uniqueOnePasivOld); $Pasiv.uniqueOnePasivStructure.add(uniqueOnePasivNew); } this.uuid = uuidOld; $Pasiv.entityStructure.remove(entityOld); $Pasiv.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Pasiv entity) { UniqueOnePasiv unique = new UniqueOnePasiv (entity, entity.getUuid()); return $Pasiv.uniqueOnePasivStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Pasiv.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setSerial(pull.pullInteger()); this.setQuantidadeDroga(pull.pullFloat()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Pasiv.classId); push.pushUuid(uuid); push.pushInteger(this.getSerial()); push.pushFloat(this.getQuantidadeDroga()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfFloat; } static{ serial.getSchemas().add( new Schema<$Pasiv, UniqueOnePasiv, Integer>() { @Override public $Pasiv newEntity(Integer value) { $Pasiv obj = new $Pasiv(); obj.setSerial(value); return obj; } @Override public UniqueOnePasiv newKey(Integer value) { UniqueOnePasiv obj = new UniqueOnePasiv(); obj.setSerial(value); return obj; } @Override public EntityStructure<$Pasiv> getEntityStructure() { return $Pasiv.entityStructure; } @Override public KeyStructure<UniqueOnePasiv> getKeyStructure() { return UniqueOnePasiv.uniqueOnePasivStructure; } } ); } } 