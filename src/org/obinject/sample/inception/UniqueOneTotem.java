package org.obinject.sample.inception; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneTotem extends $Totem implements Sort<UniqueOneTotem>, Comparable<UniqueOneTotem> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneTotem.classId == null) {UniqueOneTotem.classId = Uuid.fromString("92332D07-D59A-E070-B57B-31F24AF0D4BA"); }return UniqueOneTotem.classId; } public UniqueOneTotem(){} public UniqueOneTotem($Totem obj){ super(obj); } public UniqueOneTotem(Totem obj, Uuid uuid){ super(obj, uuid); } public UniqueOneTotem(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneTotem obj) { return (this.getCodigo() == obj.getCodigo()); } @Override public int compareTo(UniqueOneTotem obj) { if ((this.getCodigo() < obj.getCodigo())) { return -1; } else if ((this.getCodigo() == obj.getCodigo())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneTotem> getKeyStructure() { return uniqueOneTotemStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setCodigo(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getCodigo()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 