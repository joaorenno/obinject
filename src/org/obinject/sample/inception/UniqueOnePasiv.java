package org.obinject.sample.inception; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOnePasiv extends $Pasiv implements Sort<UniqueOnePasiv>, Comparable<UniqueOnePasiv> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOnePasiv.classId == null) {UniqueOnePasiv.classId = Uuid.fromString("6E98BEFE-4A86-3DA2-4042-DDEDC232239F"); }return UniqueOnePasiv.classId; } public UniqueOnePasiv(){} public UniqueOnePasiv($Pasiv obj){ super(obj); } public UniqueOnePasiv(Pasiv obj, Uuid uuid){ super(obj, uuid); } public UniqueOnePasiv(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOnePasiv obj) { return (this.getSerial() == obj.getSerial()); } @Override public int compareTo(UniqueOnePasiv obj) { if ((this.getSerial() < obj.getSerial())) { return -1; } else if ((this.getSerial() == obj.getSerial())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOnePasiv> getKeyStructure() { return uniqueOnePasivStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setSerial(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getSerial()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 