package org.obinject.sample.inception; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Sombra extends Sombra implements Entity<$Sombra> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Sombra.classId == null) {$Sombra.classId = Uuid.fromString("DE9ACC82-B01B-4D0F-0E0C-0C0FF5669CA8"); }return $Sombra.classId; } public static final BTreeEntity<$Sombra> entityStructure = new BTreeEntity<$Sombra>(new File("build/classes/org/obinject/sample/inception/inception.dbo", 4096)){}; public static final BTree<UniqueOneSombra> uniqueOneSombraStructure = new BTree<UniqueOneSombra>(new File("build/classes/org/obinject/sample/inception/inception.dbo", 4096)){}; public static final Attribute<Integer> codigo = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Sombra)entity).getCodigo(); } }; public static final Attribute<Character> sexo = new Attribute<Character> (){ @Override public Character valueOfAttribute(Entity entity) { return ((Sombra)entity).getSexo(); } }; public static final Attribute<Boolean> treinamento = new Attribute<Boolean> (){ @Override public Boolean valueOfAttribute(Entity entity) { return ((Sombra)entity).isTreinamento(); } }; public static final Attribute<org.obinject.sample.inception.Sonhador> sonhador = new Attribute<org.obinject.sample.inception.Sonhador> (){ @Override public org.obinject.sample.inception.Sonhador valueOfAttribute(Entity entity) { return ((Sombra)entity).getSonhador(); } }; public $Sombra(){ this.uuid = Uuid.generator(); } public $Sombra(Sombra obj){ this.setCodigo(obj.getCodigo()); this.setSexo(obj.getSexo()); this.setTreinamento(obj.isTreinamento()); this.setSonhador(obj.getSonhador()); this.uuid = Uuid.generator(); } public $Sombra(Sombra obj, Uuid uuid){ this.setCodigo(obj.getCodigo()); this.setSexo(obj.getSexo()); this.setTreinamento(obj.isTreinamento()); this.setSonhador(obj.getSonhador()); this.uuid = uuid; } public $Sombra($Sombra obj){ this.setCodigo(obj.getCodigo()); this.setSexo(obj.getSexo()); this.setTreinamento(obj.isTreinamento()); this.setSonhador(obj.getSonhador()); this.uuid = obj.getUuid();; } public $Sombra(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidSonhador; @Override public Sonhador getSonhador(){ Sonhador superSonhador = super.getSonhador(); if (superSonhador == null && uuidSonhador != null) {superSonhador = $Sonhador.entityStructure.find(uuidSonhador); this.setSonhador(superSonhador); }return superSonhador; }private void resetUuidSonhador() { if (this.getSonhador() != null) { if (this.getSonhador() instanceof Entity) { uuidSonhador = ((Entity) this.getSonhador()).getUuid(); } else { $Sonhador entity = new $Sonhador (this.getSonhador()); uuidSonhador = $Sonhador.find(entity); if (uuidSonhador == null) { throw new TransientObjectException("Sombra", "sonhador", "Sonhador"); } } } }@Override public boolean isEqual($Sombra obj) { return (this.getCodigo() == obj.getCodigo()) && (this.getSexo() == obj.getSexo()) && (this.isTreinamento() == obj.isTreinamento()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Sombra> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Sombra.find(this); if(uuidInject == null){ resetUuidSonhador(); $Sombra.entityStructure.add(this); UniqueOneSombra.uniqueOneSombraStructure.add(new UniqueOneSombra(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Sombra.find(this); if(uuidReject != null){ UniqueOneSombra.uniqueOneSombraStructure.remove(new UniqueOneSombra(this, this.getUuid())); $Sombra.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Sombra.find(this); $Sombra entityOld = $Sombra.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidSonhador(); UniqueOneSombra uniqueOneSombraOld = new UniqueOneSombra(entityOld, entityOld.getUuid()); UniqueOneSombra uniqueOneSombraNew = new UniqueOneSombra(this, entityOld.getUuid()); if(uniqueOneSombraOld.hasSameKey(uniqueOneSombraNew)){ $Sombra.uniqueOneSombraStructure.remove(uniqueOneSombraOld); $Sombra.uniqueOneSombraStructure.add(uniqueOneSombraNew); } this.uuid = uuidOld; $Sombra.entityStructure.remove(entityOld); $Sombra.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Sombra entity) { UniqueOneSombra unique = new UniqueOneSombra (entity, entity.getUuid()); return $Sombra.uniqueOneSombraStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Sombra.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setCodigo(pull.pullInteger()); this.setSexo(pull.pullCharacter()); this.setTreinamento(pull.pullBoolean()); int totalSonhador = pull.pullInteger(); if(totalSonhador > 0){this.uuidSonhador = pull.pullUuid(); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Sombra.classId); push.pushUuid(uuid); push.pushInteger(this.getCodigo()); push.pushCharacter(this.getSexo()); push.pushBoolean(this.isTreinamento()); if (this.uuidSonhador != null) { push.pushInteger(1); push.pushUuid(this.uuidSonhador); } else {push.pushInteger(0); } } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfCharacter + Page.sizeOfBoolean + Page.sizeOfEntity(this.uuidSonhador); } static{ codigo.getSchemas().add( new Schema<$Sombra, UniqueOneSombra, Integer>() { @Override public $Sombra newEntity(Integer value) { $Sombra obj = new $Sombra(); obj.setCodigo(value); return obj; } @Override public UniqueOneSombra newKey(Integer value) { UniqueOneSombra obj = new UniqueOneSombra(); obj.setCodigo(value); return obj; } @Override public EntityStructure<$Sombra> getEntityStructure() { return $Sombra.entityStructure; } @Override public KeyStructure<UniqueOneSombra> getKeyStructure() { return UniqueOneSombra.uniqueOneSombraStructure; } } ); } } 