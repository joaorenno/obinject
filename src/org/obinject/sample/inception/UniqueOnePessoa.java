package org.obinject.sample.inception; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOnePessoa extends $Pessoa implements Sort<UniqueOnePessoa>, Comparable<UniqueOnePessoa> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOnePessoa.classId == null) {UniqueOnePessoa.classId = Uuid.fromString("468F2537-3E9E-6C8A-5364-04E8A74AA106"); }return UniqueOnePessoa.classId; } public UniqueOnePessoa(){} public UniqueOnePessoa($Pessoa obj){ super(obj); } public UniqueOnePessoa(Pessoa obj, Uuid uuid){ super(obj, uuid); } public UniqueOnePessoa(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOnePessoa obj) { return (this.getCodigo() == obj.getCodigo()); } @Override public int compareTo(UniqueOnePessoa obj) { if ((this.getCodigo() < obj.getCodigo())) { return -1; } else if ((this.getCodigo() == obj.getCodigo())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOnePessoa> getKeyStructure() { return uniqueOnePessoaStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setCodigo(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getCodigo()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 