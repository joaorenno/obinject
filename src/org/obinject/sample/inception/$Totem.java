package org.obinject.sample.inception; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Totem extends Totem implements Entity<$Totem> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Totem.classId == null) {$Totem.classId = Uuid.fromString("7F6FBDA4-CF56-EEB1-DB53-281D4811D292"); }return $Totem.classId; } public static final BTreeEntity<$Totem> entityStructure = new BTreeEntity<$Totem>(new File("build/classes/org/obinject/sample/inception/inception.dbo", 4096)){}; public static final BTree<UniqueOneTotem> uniqueOneTotemStructure = new BTree<UniqueOneTotem>(new File("build/classes/org/obinject/sample/inception/inception.dbo", 4096)){}; public static final Attribute<Integer> codigo = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Totem)entity).getCodigo(); } }; public static final Attribute<java.lang.String> objeto = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Totem)entity).getObjeto(); } }; public static final Attribute<java.lang.String> acao = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Totem)entity).getAcao(); } }; public $Totem(){ this.uuid = Uuid.generator(); } public $Totem(Totem obj){ this.setCodigo(obj.getCodigo()); this.setObjeto(obj.getObjeto()); this.setAcao(obj.getAcao()); this.uuid = Uuid.generator(); } public $Totem(Totem obj, Uuid uuid){ this.setCodigo(obj.getCodigo()); this.setObjeto(obj.getObjeto()); this.setAcao(obj.getAcao()); this.uuid = uuid; } public $Totem($Totem obj){ this.setCodigo(obj.getCodigo()); this.setObjeto(obj.getObjeto()); this.setAcao(obj.getAcao()); this.uuid = obj.getUuid();; } public $Totem(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Totem obj) { return (this.getCodigo() == obj.getCodigo()) && (((this.getObjeto() == null) && (obj.getObjeto() == null)) || ((this.getObjeto() != null) && (obj.getObjeto() != null) && (this.getObjeto().equals( obj.getObjeto())))) && (((this.getAcao() == null) && (obj.getAcao() == null)) || ((this.getAcao() != null) && (obj.getAcao() != null) && (this.getAcao().equals( obj.getAcao())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Totem> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Totem.find(this); if(uuidInject == null){ $Totem.entityStructure.add(this); UniqueOneTotem.uniqueOneTotemStructure.add(new UniqueOneTotem(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Totem.find(this); if(uuidReject != null){ UniqueOneTotem.uniqueOneTotemStructure.remove(new UniqueOneTotem(this, this.getUuid())); $Totem.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Totem.find(this); $Totem entityOld = $Totem.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneTotem uniqueOneTotemOld = new UniqueOneTotem(entityOld, entityOld.getUuid()); UniqueOneTotem uniqueOneTotemNew = new UniqueOneTotem(this, entityOld.getUuid()); if(uniqueOneTotemOld.hasSameKey(uniqueOneTotemNew)){ $Totem.uniqueOneTotemStructure.remove(uniqueOneTotemOld); $Totem.uniqueOneTotemStructure.add(uniqueOneTotemNew); } this.uuid = uuidOld; $Totem.entityStructure.remove(entityOld); $Totem.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Totem entity) { UniqueOneTotem unique = new UniqueOneTotem (entity, entity.getUuid()); return $Totem.uniqueOneTotemStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Totem.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setCodigo(pull.pullInteger()); this.setObjeto(pull.pullString()); this.setAcao(pull.pullString()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Totem.classId); push.pushUuid(uuid); push.pushInteger(this.getCodigo()); push.pushString(this.getObjeto()); push.pushString(this.getAcao()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfString(this.getObjeto()) + Page.sizeOfString(this.getAcao()); } static{ codigo.getSchemas().add( new Schema<$Totem, UniqueOneTotem, Integer>() { @Override public $Totem newEntity(Integer value) { $Totem obj = new $Totem(); obj.setCodigo(value); return obj; } @Override public UniqueOneTotem newKey(Integer value) { UniqueOneTotem obj = new UniqueOneTotem(); obj.setCodigo(value); return obj; } @Override public EntityStructure<$Totem> getEntityStructure() { return $Totem.entityStructure; } @Override public KeyStructure<UniqueOneTotem> getKeyStructure() { return UniqueOneTotem.uniqueOneTotemStructure; } } ); } } 