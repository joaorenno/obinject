package org.obinject.sample.locadora; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Cliente extends Cliente implements Entity<$Cliente> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Cliente.classId == null) {$Cliente.classId = Uuid.fromString("4D003F53-9967-9602-2BAB-B3F538E9B588"); }return $Cliente.classId; } public static final BTreeEntity<$Cliente> entityStructure = new BTreeEntity<$Cliente>(new File("build/classes/org/obinject/sample/locadora/locadora.dbo", 4096)){}; public static final BTree<UniqueOneCliente> uniqueOneClienteStructure = new BTree<UniqueOneCliente>(new File("build/classes/org/obinject/sample/locadora/locadora.dbo", 4096)){}; public static final Attribute<java.lang.String> login = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Cliente)entity).getLogin(); } }; public static final Attribute<java.lang.String> cpf = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Cliente)entity).getCpf(); } }; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Cliente)entity).getNome(); } }; public static final Attribute<java.util.List> locacoes = new Attribute<java.util.List> (){ @Override public java.util.List valueOfAttribute(Entity entity) { return ((Cliente)entity).getLocacoes(); } }; public $Cliente(){ this.uuid = Uuid.generator(); } public $Cliente(Cliente obj){ this.setLogin(obj.getLogin()); this.setCpf(obj.getCpf()); this.setNome(obj.getNome()); this.setLocacoes(obj.getLocacoes()); this.uuid = Uuid.generator(); } public $Cliente(Cliente obj, Uuid uuid){ this.setLogin(obj.getLogin()); this.setCpf(obj.getCpf()); this.setNome(obj.getNome()); this.setLocacoes(obj.getLocacoes()); this.uuid = uuid; } public $Cliente($Cliente obj){ this.setLogin(obj.getLogin()); this.setCpf(obj.getCpf()); this.setNome(obj.getNome()); this.setLocacoes(obj.getLocacoes()); this.uuid = obj.getUuid();; } public $Cliente(Uuid uuid){ this.uuid = uuid; } protected java.util.List<Uuid> uuidLocacoes = new java.util.ArrayList<>(); @Override public java.util.List<org.obinject.sample.locadora.Locacao> getLocacoes() {java.util.List<org.obinject.sample.locadora.Locacao> superLocacoes = super.getLocacoes(); if ((superLocacoes.isEmpty()) && (!uuidLocacoes.isEmpty())) {for (Uuid uuid : uuidLocacoes) {superLocacoes.add($Locacao.entityStructure.find(uuid)); } }return superLocacoes; }private void resetUuidLocacoes(){ uuidLocacoes.clear(); if (this.getLocacoes() != null) {for (Locacao obj : this.getLocacoes()) { if (obj instanceof Entity) { uuidLocacoes.add(((Entity) obj).getUuid()); } else { $Locacao entity = new $Locacao (obj); uuidLocacoes.add($Locacao.find(entity)); if (uuidLocacoes == null) { throw new TransientObjectException("Cliente", "locacoes", "Locacao"); } } } } }@Override public boolean isEqual($Cliente obj) {  return (((this.getLogin() == null) && (obj.getLogin() == null)) || ((this.getLogin() != null) && (obj.getLogin() != null) && (this.getLogin().equals( obj.getLogin())))) && (((this.getCpf() == null) && (obj.getCpf() == null)) || ((this.getCpf() != null) && (obj.getCpf() != null) && (this.getCpf().equals( obj.getCpf())))) && (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Cliente> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Cliente.find(this); if(uuidInject == null){ resetUuidLocacoes(); $Cliente.entityStructure.add(this); UniqueOneCliente.uniqueOneClienteStructure.add(new UniqueOneCliente(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Cliente.find(this); if(uuidReject != null){ UniqueOneCliente.uniqueOneClienteStructure.remove(new UniqueOneCliente(this, this.getUuid())); $Cliente.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Cliente.find(this); $Cliente entityOld = $Cliente.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidLocacoes(); UniqueOneCliente uniqueOneClienteOld = new UniqueOneCliente(entityOld, entityOld.getUuid()); UniqueOneCliente uniqueOneClienteNew = new UniqueOneCliente(this, entityOld.getUuid()); if(uniqueOneClienteOld.hasSameKey(uniqueOneClienteNew)){ $Cliente.uniqueOneClienteStructure.remove(uniqueOneClienteOld); $Cliente.uniqueOneClienteStructure.add(uniqueOneClienteNew); } this.uuid = uuidOld; $Cliente.entityStructure.remove(entityOld); $Cliente.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Cliente entity) { UniqueOneCliente unique = new UniqueOneCliente (entity, entity.getUuid()); return $Cliente.uniqueOneClienteStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Cliente.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setLogin(pull.pullString()); this.setCpf(pull.pullString()); this.setNome(pull.pullString()); int totalLocacoes = pull.pullInteger(); for (int i = 0; i < totalLocacoes; i++) {this.uuidLocacoes.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Cliente.classId); push.pushUuid(uuid); push.pushString(this.getLogin()); push.pushString(this.getCpf()); push.pushString(this.getNome()); push.pushInteger(this.uuidLocacoes.size()); for (Uuid uuidPush : this.uuidLocacoes) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getLogin()) + Page.sizeOfString(this.getCpf()) + Page.sizeOfString(this.getNome()) + Page.sizeOfEntityCollection(this.uuidLocacoes); } static{ login.getSchemas().add( new Schema<$Cliente, UniqueOneCliente, java.lang.String>() { @Override public $Cliente newEntity(java.lang.String value) { $Cliente obj = new $Cliente(); obj.setLogin(value); return obj; } @Override public UniqueOneCliente newKey(java.lang.String value) { UniqueOneCliente obj = new UniqueOneCliente(); obj.setLogin(value); return obj; } @Override public EntityStructure<$Cliente> getEntityStructure() { return $Cliente.entityStructure; } @Override public KeyStructure<UniqueOneCliente> getKeyStructure() { return UniqueOneCliente.uniqueOneClienteStructure; } } ); } } 