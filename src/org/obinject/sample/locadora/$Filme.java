package org.obinject.sample.locadora; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Filme extends Filme implements Entity<$Filme> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Filme.classId == null) {$Filme.classId = Uuid.fromString("0EAC26F5-7663-070E-0DE4-A2C2051B0462"); }return $Filme.classId; } public static final BTreeEntity<$Filme> entityStructure = new BTreeEntity<$Filme>(new File("build/classes/org/obinject/sample/locadora/locadora.dbo", 4096)){}; public static final BTree<UniqueOneFilme> uniqueOneFilmeStructure = new BTree<UniqueOneFilme>(new File("build/classes/org/obinject/sample/locadora/locadora.dbo", 4096)){}; public static final Attribute<Integer> codigo = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Filme)entity).getCodigo(); } }; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Filme)entity).getNome(); } }; public static final Attribute<Double> preco = new Attribute<Double> (){ @Override public Double valueOfAttribute(Entity entity) { return ((Filme)entity).getPreco(); } }; public $Filme(){ this.uuid = Uuid.generator(); } public $Filme(Filme obj){ this.setCodigo(obj.getCodigo()); this.setNome(obj.getNome()); this.setPreco(obj.getPreco()); this.uuid = Uuid.generator(); } public $Filme(Filme obj, Uuid uuid){ this.setCodigo(obj.getCodigo()); this.setNome(obj.getNome()); this.setPreco(obj.getPreco()); this.uuid = uuid; } public $Filme($Filme obj){ this.setCodigo(obj.getCodigo()); this.setNome(obj.getNome()); this.setPreco(obj.getPreco()); this.uuid = obj.getUuid();; } public $Filme(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Filme obj) { return (this.getCodigo() == obj.getCodigo()) && (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (this.getPreco() == obj.getPreco()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Filme> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Filme.find(this); if(uuidInject == null){ $Filme.entityStructure.add(this); UniqueOneFilme.uniqueOneFilmeStructure.add(new UniqueOneFilme(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Filme.find(this); if(uuidReject != null){ UniqueOneFilme.uniqueOneFilmeStructure.remove(new UniqueOneFilme(this, this.getUuid())); $Filme.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Filme.find(this); $Filme entityOld = $Filme.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneFilme uniqueOneFilmeOld = new UniqueOneFilme(entityOld, entityOld.getUuid()); UniqueOneFilme uniqueOneFilmeNew = new UniqueOneFilme(this, entityOld.getUuid()); if(uniqueOneFilmeOld.hasSameKey(uniqueOneFilmeNew)){ $Filme.uniqueOneFilmeStructure.remove(uniqueOneFilmeOld); $Filme.uniqueOneFilmeStructure.add(uniqueOneFilmeNew); } this.uuid = uuidOld; $Filme.entityStructure.remove(entityOld); $Filme.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Filme entity) { UniqueOneFilme unique = new UniqueOneFilme (entity, entity.getUuid()); return $Filme.uniqueOneFilmeStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Filme.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setCodigo(pull.pullInteger()); this.setNome(pull.pullString()); this.setPreco(pull.pullDouble()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Filme.classId); push.pushUuid(uuid); push.pushInteger(this.getCodigo()); push.pushString(this.getNome()); push.pushDouble(this.getPreco()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfString(this.getNome()) + Page.sizeOfDouble; } static{ codigo.getSchemas().add( new Schema<$Filme, UniqueOneFilme, Integer>() { @Override public $Filme newEntity(Integer value) { $Filme obj = new $Filme(); obj.setCodigo(value); return obj; } @Override public UniqueOneFilme newKey(Integer value) { UniqueOneFilme obj = new UniqueOneFilme(); obj.setCodigo(value); return obj; } @Override public EntityStructure<$Filme> getEntityStructure() { return $Filme.entityStructure; } @Override public KeyStructure<UniqueOneFilme> getKeyStructure() { return UniqueOneFilme.uniqueOneFilmeStructure; } } ); } } 