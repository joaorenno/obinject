package org.obinject.sample.locadora; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneLocacao extends $Locacao implements Sort<UniqueOneLocacao>, Comparable<UniqueOneLocacao> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneLocacao.classId == null) {UniqueOneLocacao.classId = Uuid.fromString("FAAE1606-0C27-5B32-8C61-6D7C85B8BF28"); }return UniqueOneLocacao.classId; } public UniqueOneLocacao(){} public UniqueOneLocacao($Locacao obj){ super(obj); } public UniqueOneLocacao(Locacao obj, Uuid uuid){ super(obj, uuid); } public UniqueOneLocacao(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneLocacao obj) { return (this.getId() == obj.getId()); } @Override public int compareTo(UniqueOneLocacao obj) { if ((this.getId() < obj.getId())) { return -1; } else if ((this.getId() == obj.getId())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneLocacao> getKeyStructure() { return uniqueOneLocacaoStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setId(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getId()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 