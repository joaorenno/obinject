package org.obinject.sample.student; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; public class $Student extends Student implements Entity<$Student> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Student.classId == null) {$Student.classId = Uuid.fromString("ABA93D1B-A6FF-C525-B0DD-9F0AC751F96D"); }return $Student.classId; } public static final BTreeEntity<$Student> entityStructure = new BTreeEntity<$Student>(new File("build/classes/org/obinject/sample/student/student.dbo", 4096)){}; public static final BTree<SortOneStudent> sortOneStudentStructure = new BTree<SortOneStudent>(new File("build/classes/org/obinject/sample/student/student.dbo", 4096)){}; public static final BTree<UniqueOneStudent> uniqueOneStudentStructure = new BTree<UniqueOneStudent>(new File("build/classes/org/obinject/sample/student/student.dbo", 4096)){}; public static final MTree<EditionOneStudent> editionOneStudentStructure = new MTree<EditionOneStudent>(new File("build/classes/org/obinject/sample/student/student.dbo", 4096)){}; public static final Attribute<Integer> registration = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Student)entity).getRegistration(); } }; public static final Attribute<java.lang.String> name = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Student)entity).getName(); } }; public static final Attribute<java.lang.String> address = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Student)entity).getAddress(); } }; public static final Attribute<java.lang.String> course = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Student)entity).getCourse(); } }; public static final Attribute<Float> coefficient = new Attribute<Float> (){ @Override public Float valueOfAttribute(Entity entity) { return ((Student)entity).getCoefficient(); } }; public static final Attribute<Integer> age = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Student)entity).getAge(); } }; public $Student(){ this.uuid = Uuid.generator(); } public $Student(Student obj){ this.setRegistration(obj.getRegistration()); this.setName(obj.getName()); this.setAddress(obj.getAddress()); this.setCourse(obj.getCourse()); this.setCoefficient(obj.getCoefficient()); this.setAge(obj.getAge()); this.uuid = Uuid.generator(); } public $Student(Student obj, Uuid uuid){ this.setRegistration(obj.getRegistration()); this.setName(obj.getName()); this.setAddress(obj.getAddress()); this.setCourse(obj.getCourse()); this.setCoefficient(obj.getCoefficient()); this.setAge(obj.getAge()); this.uuid = uuid; } public $Student($Student obj){ this.setRegistration(obj.getRegistration()); this.setName(obj.getName()); this.setAddress(obj.getAddress()); this.setCourse(obj.getCourse()); this.setCoefficient(obj.getCoefficient()); this.setAge(obj.getAge()); this.uuid = obj.getUuid();; } public $Student(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Student obj) { return (this.getRegistration() == obj.getRegistration()) && (((this.getName() == null) && (obj.getName() == null)) || ((this.getName() != null) && (obj.getName() != null) && (this.getName().equals( obj.getName())))) && (((this.getAddress() == null) && (obj.getAddress() == null)) || ((this.getAddress() != null) && (obj.getAddress() != null) && (this.getAddress().equals( obj.getAddress())))) && (((this.getCourse() == null) && (obj.getCourse() == null)) || ((this.getCourse() != null) && (obj.getCourse() != null) && (this.getCourse().equals( obj.getCourse())))) && (this.getCoefficient() == obj.getCoefficient()) && (this.getAge() == obj.getAge()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Student> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Student.find(this); if(uuidInject == null){ $Student.entityStructure.add(this); SortOneStudent.sortOneStudentStructure.add(new SortOneStudent(this, this.getUuid())); UniqueOneStudent.uniqueOneStudentStructure.add(new UniqueOneStudent(this, this.getUuid())); EditionOneStudent.editionOneStudentStructure.add(new EditionOneStudent(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Student.find(this); if(uuidReject != null){ SortOneStudent.sortOneStudentStructure.remove(new SortOneStudent(this, this.getUuid())); UniqueOneStudent.uniqueOneStudentStructure.remove(new UniqueOneStudent(this, this.getUuid())); EditionOneStudent.editionOneStudentStructure.remove(new EditionOneStudent(this, this.getUuid())); $Student.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Student.find(this); $Student entityOld = $Student.entityStructure.find(uuidOld); if(entityOld != null){ SortOneStudent sortOneStudentOld = new SortOneStudent(entityOld, entityOld.getUuid()); SortOneStudent sortOneStudentNew = new SortOneStudent(this, entityOld.getUuid()); if(sortOneStudentOld.hasSameKey(sortOneStudentNew)){ $Student.sortOneStudentStructure.remove(sortOneStudentOld); $Student.sortOneStudentStructure.add(sortOneStudentNew); } UniqueOneStudent uniqueOneStudentOld = new UniqueOneStudent(entityOld, entityOld.getUuid()); UniqueOneStudent uniqueOneStudentNew = new UniqueOneStudent(this, entityOld.getUuid()); if(uniqueOneStudentOld.hasSameKey(uniqueOneStudentNew)){ $Student.uniqueOneStudentStructure.remove(uniqueOneStudentOld); $Student.uniqueOneStudentStructure.add(uniqueOneStudentNew); } EditionOneStudent editionOneStudentOld = new EditionOneStudent(entityOld, entityOld.getUuid()); EditionOneStudent editionOneStudentNew = new EditionOneStudent(this, entityOld.getUuid()); if(editionOneStudentOld.hasSameKey(editionOneStudentNew)){ $Student.editionOneStudentStructure.remove(editionOneStudentOld); $Student.editionOneStudentStructure.add(editionOneStudentNew); } this.uuid = uuidOld; $Student.entityStructure.remove(entityOld); $Student.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Student entity) { UniqueOneStudent unique = new UniqueOneStudent (entity, entity.getUuid()); return $Student.uniqueOneStudentStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Student.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setRegistration(pull.pullInteger()); this.setName(pull.pullString()); this.setAddress(pull.pullString()); this.setCourse(pull.pullString()); this.setCoefficient(pull.pullFloat()); this.setAge(pull.pullInteger()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Student.classId); push.pushUuid(uuid); push.pushInteger(this.getRegistration()); push.pushString(this.getName()); push.pushString(this.getAddress()); push.pushString(this.getCourse()); push.pushFloat(this.getCoefficient()); push.pushInteger(this.getAge()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfString(this.getName()) + Page.sizeOfString(this.getAddress()) + Page.sizeOfString(this.getCourse()) + Page.sizeOfFloat + Page.sizeOfInteger; } static{ registration.getSchemas().add( new Schema<$Student, UniqueOneStudent, Integer>() { @Override public $Student newEntity(Integer value) { $Student obj = new $Student(); obj.setRegistration(value); return obj; } @Override public UniqueOneStudent newKey(Integer value) { UniqueOneStudent obj = new UniqueOneStudent(); obj.setRegistration(value); return obj; } @Override public EntityStructure<$Student> getEntityStructure() { return $Student.entityStructure; } @Override public KeyStructure<UniqueOneStudent> getKeyStructure() { return UniqueOneStudent.uniqueOneStudentStructure; } } ); name.getSchemas().add( new Schema<$Student, SortOneStudent, java.lang.String>() { @Override public $Student newEntity(java.lang.String value) { $Student obj = new $Student(); obj.setName(value); return obj; } @Override public SortOneStudent newKey(java.lang.String value) { SortOneStudent obj = new SortOneStudent(); obj.setName(value); return obj; } @Override public EntityStructure<$Student> getEntityStructure() { return $Student.entityStructure; } @Override public KeyStructure<SortOneStudent> getKeyStructure() { return SortOneStudent.sortOneStudentStructure; } } ); name.getSchemas().add( new Schema<$Student, EditionOneStudent, java.lang.String>() { @Override public $Student newEntity(java.lang.String value) { $Student obj = new $Student(); obj.setName(value); return obj; } @Override public EditionOneStudent newKey(java.lang.String value) { EditionOneStudent obj = new EditionOneStudent(); obj.setName(value); return obj; } @Override public EntityStructure<$Student> getEntityStructure() { return $Student.entityStructure; } @Override public KeyStructure<EditionOneStudent> getKeyStructure() { return EditionOneStudent.editionOneStudentStructure; } } ); } } 