package org.obinject.sample.student; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneStudent extends $Student implements Sort<UniqueOneStudent>, Comparable<UniqueOneStudent> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneStudent.classId == null) {UniqueOneStudent.classId = Uuid.fromString("8EDFFDE7-8481-BF86-AAA8-CC834406C077"); }return UniqueOneStudent.classId; } public UniqueOneStudent(){} public UniqueOneStudent($Student obj){ super(obj); } public UniqueOneStudent(Student obj, Uuid uuid){ super(obj, uuid); } public UniqueOneStudent(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneStudent obj) { return (this.getRegistration() == obj.getRegistration()); } @Override public int compareTo(UniqueOneStudent obj) { if ((this.getRegistration() < obj.getRegistration())) { return -1; } else if ((this.getRegistration() == obj.getRegistration())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneStudent> getKeyStructure() { return uniqueOneStudentStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setRegistration(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getRegistration()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 