package org.obinject.sample.student; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class SortOneStudent extends $Student implements Sort<SortOneStudent>, Comparable<SortOneStudent> { private static Uuid classId; public static Uuid getClassId(){ if (SortOneStudent.classId == null) {SortOneStudent.classId = Uuid.fromString("A900B0CD-ADE4-BEA8-0CAA-2C2B6D0F3E6C"); }return SortOneStudent.classId; } public SortOneStudent(){} public SortOneStudent($Student obj){ super(obj); } public SortOneStudent(Student obj, Uuid uuid){ super(obj, uuid); } public SortOneStudent(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(SortOneStudent obj) {  return (((this.getName() == null) && (obj.getName() == null)) || ((this.getName() != null) && (obj.getName() != null) && (this.getName().equals( obj.getName())))); } @Override public int compareTo(SortOneStudent obj) { if (((this.getName() == null) || (this.getName() != null) && (obj.getName() != null) && (this.getName().compareTo( obj.getName()) < 0))) { return -1; } else if (((this.getName() == null) || (this.getName() != null) && (obj.getName() != null) && (this.getName().compareTo( obj.getName()) == 0))) { return 0; } else {return 1; } }@Override public KeyStructure<SortOneStudent> getKeyStructure() { return sortOneStudentStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setName(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getName()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getName()); } } 