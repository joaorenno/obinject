package org.obinject.sample.color; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneColorHistogram extends $ColorHistogram implements Sort<UniqueOneColorHistogram>, Comparable<UniqueOneColorHistogram> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneColorHistogram.classId == null) {UniqueOneColorHistogram.classId = Uuid.fromString("49E303E2-DAC1-19D5-13B6-02037667904D"); }return UniqueOneColorHistogram.classId; } public UniqueOneColorHistogram(){} public UniqueOneColorHistogram($ColorHistogram obj){ super(obj); } public UniqueOneColorHistogram(ColorHistogram obj, Uuid uuid){ super(obj, uuid); } public UniqueOneColorHistogram(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneColorHistogram obj) { return (this.getId() == obj.getId()); } @Override public int compareTo(UniqueOneColorHistogram obj) { if ((this.getId() < obj.getId())) { return -1; } else if ((this.getId() == obj.getId())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneColorHistogram> getKeyStructure() { return uniqueOneColorHistogramStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setId(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getId()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 