package org.obinject.sample.color; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; import org.obinject.storage.RTree; public class $CoocTexture extends CoocTexture implements Entity<$CoocTexture> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($CoocTexture.classId == null) {$CoocTexture.classId = Uuid.fromString("865EAC65-1050-E3A4-83CC-6A84E80AA22A"); }return $CoocTexture.classId; } public static final BTreeEntity<$CoocTexture> entityStructure = new BTreeEntity<$CoocTexture>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final BTree<UniqueOneCoocTexture> uniqueOneCoocTextureStructure = new BTree<UniqueOneCoocTexture>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final RTree<RectangleOneCoocTexture> rectangleOneCoocTextureStructure = new RTree<RectangleOneCoocTexture>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final MTree<PointOneCoocTexture> pointOneCoocTextureStructure = new MTree<PointOneCoocTexture>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final Attribute<Integer> id = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((CoocTexture)entity).getId(); } }; public static final Attribute<double[]> textures = new Attribute<double[]> (){ @Override public double[] valueOfAttribute(Entity entity) { return ((CoocTexture)entity).getTextures(); } }; public static final Attribute<double[]> extension = new Attribute<double[]> (){ @Override public double[] valueOfAttribute(Entity entity) { return ((CoocTexture)entity).getExtension(); } }; public $CoocTexture(){ this.uuid = Uuid.generator(); } public $CoocTexture(CoocTexture obj){ this.setId(obj.getId()); this.setTextures(obj.getTextures()); this.setExtension(obj.getExtension()); this.uuid = Uuid.generator(); } public $CoocTexture(CoocTexture obj, Uuid uuid){ this.setId(obj.getId()); this.setTextures(obj.getTextures()); this.setExtension(obj.getExtension()); this.uuid = uuid; } public $CoocTexture($CoocTexture obj){ this.setId(obj.getId()); this.setTextures(obj.getTextures()); this.setExtension(obj.getExtension()); this.uuid = obj.getUuid();; } public $CoocTexture(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($CoocTexture obj) { return (this.getId() == obj.getId()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$CoocTexture> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $CoocTexture.find(this); if(uuidInject == null){ $CoocTexture.entityStructure.add(this); UniqueOneCoocTexture.uniqueOneCoocTextureStructure.add(new UniqueOneCoocTexture(this, this.getUuid())); RectangleOneCoocTexture.rectangleOneCoocTextureStructure.add(new RectangleOneCoocTexture(this, this.getUuid())); PointOneCoocTexture.pointOneCoocTextureStructure.add(new PointOneCoocTexture(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $CoocTexture.find(this); if(uuidReject != null){ UniqueOneCoocTexture.uniqueOneCoocTextureStructure.remove(new UniqueOneCoocTexture(this, this.getUuid())); RectangleOneCoocTexture.rectangleOneCoocTextureStructure.remove(new RectangleOneCoocTexture(this, this.getUuid())); PointOneCoocTexture.pointOneCoocTextureStructure.remove(new PointOneCoocTexture(this, this.getUuid())); $CoocTexture.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $CoocTexture.find(this); $CoocTexture entityOld = $CoocTexture.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneCoocTexture uniqueOneCoocTextureOld = new UniqueOneCoocTexture(entityOld, entityOld.getUuid()); UniqueOneCoocTexture uniqueOneCoocTextureNew = new UniqueOneCoocTexture(this, entityOld.getUuid()); if(uniqueOneCoocTextureOld.hasSameKey(uniqueOneCoocTextureNew)){ $CoocTexture.uniqueOneCoocTextureStructure.remove(uniqueOneCoocTextureOld); $CoocTexture.uniqueOneCoocTextureStructure.add(uniqueOneCoocTextureNew); } RectangleOneCoocTexture rectangleOneCoocTextureOld = new RectangleOneCoocTexture(entityOld, entityOld.getUuid()); RectangleOneCoocTexture rectangleOneCoocTextureNew = new RectangleOneCoocTexture(this, entityOld.getUuid()); if(rectangleOneCoocTextureOld.hasSameKey(rectangleOneCoocTextureNew)){ $CoocTexture.rectangleOneCoocTextureStructure.remove(rectangleOneCoocTextureOld); $CoocTexture.rectangleOneCoocTextureStructure.add(rectangleOneCoocTextureNew); } PointOneCoocTexture pointOneCoocTextureOld = new PointOneCoocTexture(entityOld, entityOld.getUuid()); PointOneCoocTexture pointOneCoocTextureNew = new PointOneCoocTexture(this, entityOld.getUuid()); if(pointOneCoocTextureOld.hasSameKey(pointOneCoocTextureNew)){ $CoocTexture.pointOneCoocTextureStructure.remove(pointOneCoocTextureOld); $CoocTexture.pointOneCoocTextureStructure.add(pointOneCoocTextureNew); } this.uuid = uuidOld; $CoocTexture.entityStructure.remove(entityOld); $CoocTexture.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($CoocTexture entity) { UniqueOneCoocTexture unique = new UniqueOneCoocTexture (entity, entity.getUuid()); return $CoocTexture.uniqueOneCoocTextureStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($CoocTexture.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setId(pull.pullInteger()); this.setTextures((double[]) pull.pullMatrix()); this.setExtension((double[]) pull.pullMatrix()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($CoocTexture.classId); push.pushUuid(uuid); push.pushInteger(this.getId()); push.pushMatrix(getTextures()); push.pushMatrix(getExtension()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfMatrix(this.getTextures()) + Page.sizeOfMatrix(this.getExtension()); } static{ id.getSchemas().add( new Schema<$CoocTexture, UniqueOneCoocTexture, Integer>() { @Override public $CoocTexture newEntity(Integer value) { $CoocTexture obj = new $CoocTexture(); obj.setId(value); return obj; } @Override public UniqueOneCoocTexture newKey(Integer value) { UniqueOneCoocTexture obj = new UniqueOneCoocTexture(); obj.setId(value); return obj; } @Override public EntityStructure<$CoocTexture> getEntityStructure() { return $CoocTexture.entityStructure; } @Override public KeyStructure<UniqueOneCoocTexture> getKeyStructure() { return UniqueOneCoocTexture.uniqueOneCoocTextureStructure; } } ); textures.getSchemas().add( new Schema<$CoocTexture, RectangleOneCoocTexture, double[]>() { @Override public $CoocTexture newEntity(double[] value) { $CoocTexture obj = new $CoocTexture(); obj.setTextures(value); return obj; } @Override public RectangleOneCoocTexture newKey(double[] value) { RectangleOneCoocTexture obj = new RectangleOneCoocTexture(); obj.setTextures(value); return obj; } @Override public EntityStructure<$CoocTexture> getEntityStructure() { return $CoocTexture.entityStructure; } @Override public KeyStructure<RectangleOneCoocTexture> getKeyStructure() { return RectangleOneCoocTexture.rectangleOneCoocTextureStructure; } } ); textures.getSchemas().add( new Schema<$CoocTexture, PointOneCoocTexture, double[]>() { @Override public $CoocTexture newEntity(double[] value) { $CoocTexture obj = new $CoocTexture(); obj.setTextures(value); return obj; } @Override public PointOneCoocTexture newKey(double[] value) { PointOneCoocTexture obj = new PointOneCoocTexture(); obj.setTextures(value); return obj; } @Override public EntityStructure<$CoocTexture> getEntityStructure() { return $CoocTexture.entityStructure; } @Override public KeyStructure<PointOneCoocTexture> getKeyStructure() { return PointOneCoocTexture.pointOneCoocTextureStructure; } } ); extension.getSchemas().add( new Schema<$CoocTexture, RectangleOneCoocTexture, double[]>() { @Override public $CoocTexture newEntity(double[] value) { $CoocTexture obj = new $CoocTexture(); obj.setExtension(value); return obj; } @Override public RectangleOneCoocTexture newKey(double[] value) { RectangleOneCoocTexture obj = new RectangleOneCoocTexture(); obj.setExtension(value); return obj; } @Override public EntityStructure<$CoocTexture> getEntityStructure() { return $CoocTexture.entityStructure; } @Override public KeyStructure<RectangleOneCoocTexture> getKeyStructure() { return RectangleOneCoocTexture.rectangleOneCoocTextureStructure; } } ); } } 