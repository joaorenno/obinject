package org.obinject.sample.color; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Point; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class PointOneCoocTexture extends $CoocTexture implements Point<PointOneCoocTexture> { private double preservedDistance; private static Uuid classId; public static Uuid getClassId(){ if (PointOneCoocTexture.classId == null) {PointOneCoocTexture.classId = Uuid.fromString("F8BF4C78-1E38-B1FC-3E0D-EB5480784198"); }return PointOneCoocTexture.classId; } public PointOneCoocTexture(){} public PointOneCoocTexture($CoocTexture obj){ super(obj); } public PointOneCoocTexture(CoocTexture obj, Uuid uuid){ super(obj, uuid); } public PointOneCoocTexture(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(PointOneCoocTexture obj) { int i=0; while(( i < this.numberOfDimensions()) && (this.getOrigin(i) == obj.getOrigin(i))){ i++; }return i == this.numberOfDimensions(); }@Override public double getOrigin(int axis){ switch(axis){ case 0: return getTextures()[0]; case 1: return getTextures()[1]; case 2: return getTextures()[2]; case 3: return getTextures()[3]; case 4: return getTextures()[4]; case 5: return getTextures()[5]; case 6: return getTextures()[6]; case 7: return getTextures()[7]; case 8: return getTextures()[8]; case 9: return getTextures()[9]; case 10: return getTextures()[10]; case 11: return getTextures()[11]; case 12: return getTextures()[12]; case 13: return getTextures()[13]; case 14: return getTextures()[14]; case 15: return getTextures()[15]; default: return 0; } } @Override public void setOrigin(int axis, double value){ switch(axis){ case 0: getTextures()[0] = value; break; case 1: getTextures()[1] = value; break; case 2: getTextures()[2] = value; break; case 3: getTextures()[3] = value; break; case 4: getTextures()[4] = value; break; case 5: getTextures()[5] = value; break; case 6: getTextures()[6] = value; break; case 7: getTextures()[7] = value; break; case 8: getTextures()[8] = value; break; case 9: getTextures()[9] = value; break; case 10: getTextures()[10] = value; break; case 11: getTextures()[11] = value; break; case 12: getTextures()[12] = value; break; case 13: getTextures()[13] = value; break; case 14: getTextures()[14] = value; break; case 15: getTextures()[15] = value; break; } } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public int numberOfDimensions(){ return 16;} @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public double distanceTo(PointOneCoocTexture obj){ return DistanceUtil.euclidean(this, obj); } @Override public KeyStructure<PointOneCoocTexture> getKeyStructure() { return pointOneCoocTextureStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ this.setOrigin(i, pull.pullDouble()); } return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ push.pushDouble(this.getOrigin(i));} } @Override public int sizeOfKey() { return Page.sizeOfDouble * this.numberOfDimensions();} } 