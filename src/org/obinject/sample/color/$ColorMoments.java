package org.obinject.sample.color; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; import org.obinject.storage.RTree; public class $ColorMoments extends ColorMoments implements Entity<$ColorMoments> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($ColorMoments.classId == null) {$ColorMoments.classId = Uuid.fromString("25E9233F-58CC-B307-3D6F-C2C975CDAC69"); }return $ColorMoments.classId; } public static final BTreeEntity<$ColorMoments> entityStructure = new BTreeEntity<$ColorMoments>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final BTree<UniqueOneColorMoments> uniqueOneColorMomentsStructure = new BTree<UniqueOneColorMoments>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final RTree<RectangleOneColorMoments> rectangleOneColorMomentsStructure = new RTree<RectangleOneColorMoments>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final MTree<PointOneColorMoments> pointOneColorMomentsStructure = new MTree<PointOneColorMoments>(new File("build/classes/org/obinject/sample/color/color.dbo", 2048)){}; public static final Attribute<Integer> id = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((ColorMoments)entity).getId(); } }; public static final Attribute<double[]> moments = new Attribute<double[]> (){ @Override public double[] valueOfAttribute(Entity entity) { return ((ColorMoments)entity).getMoments(); } }; public static final Attribute<double[]> extension = new Attribute<double[]> (){ @Override public double[] valueOfAttribute(Entity entity) { return ((ColorMoments)entity).getExtension(); } }; public $ColorMoments(){ this.uuid = Uuid.generator(); } public $ColorMoments(ColorMoments obj){ this.setId(obj.getId()); this.setMoments(obj.getMoments()); this.setExtension(obj.getExtension()); this.uuid = Uuid.generator(); } public $ColorMoments(ColorMoments obj, Uuid uuid){ this.setId(obj.getId()); this.setMoments(obj.getMoments()); this.setExtension(obj.getExtension()); this.uuid = uuid; } public $ColorMoments($ColorMoments obj){ this.setId(obj.getId()); this.setMoments(obj.getMoments()); this.setExtension(obj.getExtension()); this.uuid = obj.getUuid();; } public $ColorMoments(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($ColorMoments obj) { return (this.getId() == obj.getId()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$ColorMoments> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $ColorMoments.find(this); if(uuidInject == null){ $ColorMoments.entityStructure.add(this); UniqueOneColorMoments.uniqueOneColorMomentsStructure.add(new UniqueOneColorMoments(this, this.getUuid())); RectangleOneColorMoments.rectangleOneColorMomentsStructure.add(new RectangleOneColorMoments(this, this.getUuid())); PointOneColorMoments.pointOneColorMomentsStructure.add(new PointOneColorMoments(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $ColorMoments.find(this); if(uuidReject != null){ UniqueOneColorMoments.uniqueOneColorMomentsStructure.remove(new UniqueOneColorMoments(this, this.getUuid())); RectangleOneColorMoments.rectangleOneColorMomentsStructure.remove(new RectangleOneColorMoments(this, this.getUuid())); PointOneColorMoments.pointOneColorMomentsStructure.remove(new PointOneColorMoments(this, this.getUuid())); $ColorMoments.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $ColorMoments.find(this); $ColorMoments entityOld = $ColorMoments.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneColorMoments uniqueOneColorMomentsOld = new UniqueOneColorMoments(entityOld, entityOld.getUuid()); UniqueOneColorMoments uniqueOneColorMomentsNew = new UniqueOneColorMoments(this, entityOld.getUuid()); if(uniqueOneColorMomentsOld.hasSameKey(uniqueOneColorMomentsNew)){ $ColorMoments.uniqueOneColorMomentsStructure.remove(uniqueOneColorMomentsOld); $ColorMoments.uniqueOneColorMomentsStructure.add(uniqueOneColorMomentsNew); } RectangleOneColorMoments rectangleOneColorMomentsOld = new RectangleOneColorMoments(entityOld, entityOld.getUuid()); RectangleOneColorMoments rectangleOneColorMomentsNew = new RectangleOneColorMoments(this, entityOld.getUuid()); if(rectangleOneColorMomentsOld.hasSameKey(rectangleOneColorMomentsNew)){ $ColorMoments.rectangleOneColorMomentsStructure.remove(rectangleOneColorMomentsOld); $ColorMoments.rectangleOneColorMomentsStructure.add(rectangleOneColorMomentsNew); } PointOneColorMoments pointOneColorMomentsOld = new PointOneColorMoments(entityOld, entityOld.getUuid()); PointOneColorMoments pointOneColorMomentsNew = new PointOneColorMoments(this, entityOld.getUuid()); if(pointOneColorMomentsOld.hasSameKey(pointOneColorMomentsNew)){ $ColorMoments.pointOneColorMomentsStructure.remove(pointOneColorMomentsOld); $ColorMoments.pointOneColorMomentsStructure.add(pointOneColorMomentsNew); } this.uuid = uuidOld; $ColorMoments.entityStructure.remove(entityOld); $ColorMoments.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($ColorMoments entity) { UniqueOneColorMoments unique = new UniqueOneColorMoments (entity, entity.getUuid()); return $ColorMoments.uniqueOneColorMomentsStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($ColorMoments.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setId(pull.pullInteger()); this.setMoments((double[]) pull.pullMatrix()); this.setExtension((double[]) pull.pullMatrix()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($ColorMoments.classId); push.pushUuid(uuid); push.pushInteger(this.getId()); push.pushMatrix(getMoments()); push.pushMatrix(getExtension()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfMatrix(this.getMoments()) + Page.sizeOfMatrix(this.getExtension()); } static{ id.getSchemas().add( new Schema<$ColorMoments, UniqueOneColorMoments, Integer>() { @Override public $ColorMoments newEntity(Integer value) { $ColorMoments obj = new $ColorMoments(); obj.setId(value); return obj; } @Override public UniqueOneColorMoments newKey(Integer value) { UniqueOneColorMoments obj = new UniqueOneColorMoments(); obj.setId(value); return obj; } @Override public EntityStructure<$ColorMoments> getEntityStructure() { return $ColorMoments.entityStructure; } @Override public KeyStructure<UniqueOneColorMoments> getKeyStructure() { return UniqueOneColorMoments.uniqueOneColorMomentsStructure; } } ); moments.getSchemas().add( new Schema<$ColorMoments, RectangleOneColorMoments, double[]>() { @Override public $ColorMoments newEntity(double[] value) { $ColorMoments obj = new $ColorMoments(); obj.setMoments(value); return obj; } @Override public RectangleOneColorMoments newKey(double[] value) { RectangleOneColorMoments obj = new RectangleOneColorMoments(); obj.setMoments(value); return obj; } @Override public EntityStructure<$ColorMoments> getEntityStructure() { return $ColorMoments.entityStructure; } @Override public KeyStructure<RectangleOneColorMoments> getKeyStructure() { return RectangleOneColorMoments.rectangleOneColorMomentsStructure; } } ); moments.getSchemas().add( new Schema<$ColorMoments, PointOneColorMoments, double[]>() { @Override public $ColorMoments newEntity(double[] value) { $ColorMoments obj = new $ColorMoments(); obj.setMoments(value); return obj; } @Override public PointOneColorMoments newKey(double[] value) { PointOneColorMoments obj = new PointOneColorMoments(); obj.setMoments(value); return obj; } @Override public EntityStructure<$ColorMoments> getEntityStructure() { return $ColorMoments.entityStructure; } @Override public KeyStructure<PointOneColorMoments> getKeyStructure() { return PointOneColorMoments.pointOneColorMomentsStructure; } } ); extension.getSchemas().add( new Schema<$ColorMoments, RectangleOneColorMoments, double[]>() { @Override public $ColorMoments newEntity(double[] value) { $ColorMoments obj = new $ColorMoments(); obj.setExtension(value); return obj; } @Override public RectangleOneColorMoments newKey(double[] value) { RectangleOneColorMoments obj = new RectangleOneColorMoments(); obj.setExtension(value); return obj; } @Override public EntityStructure<$ColorMoments> getEntityStructure() { return $ColorMoments.entityStructure; } @Override public KeyStructure<RectangleOneColorMoments> getKeyStructure() { return RectangleOneColorMoments.rectangleOneColorMomentsStructure; } } ); } } 