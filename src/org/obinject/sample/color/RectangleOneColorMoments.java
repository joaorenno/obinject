package org.obinject.sample.color; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Rectangle; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class RectangleOneColorMoments extends $ColorMoments implements Rectangle<RectangleOneColorMoments> { private static Uuid classId; public static Uuid getClassId(){ if (RectangleOneColorMoments.classId == null) {RectangleOneColorMoments.classId = Uuid.fromString("F0A07D34-0659-3685-C1D0-406565C74C2A"); }return RectangleOneColorMoments.classId; } private double preservedDistance; public RectangleOneColorMoments(){} public RectangleOneColorMoments($ColorMoments obj){ super(obj); } public RectangleOneColorMoments(ColorMoments obj, Uuid uuid){ super(obj, uuid); } public RectangleOneColorMoments(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(RectangleOneColorMoments obj) { int i=0; while(( i < this.numberOfDimensions()) && (this.getOrigin(i) == obj.getOrigin(i))){ i++; }return i == this.numberOfDimensions(); }@Override public KeyStructure<RectangleOneColorMoments> getKeyStructure() { return rectangleOneColorMomentsStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ this.setOrigin(i, pull.pullDouble()); this.setExtension(i, pull.pullDouble()); } return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ push.pushDouble(this.getOrigin(i)); push.pushDouble(this.getExtension(i)); } } @Override public int sizeOfKey() { return Page.sizeOfDouble * 2 * this.numberOfDimensions();} @Override public double getOrigin(int axis){ switch(axis){ case 0: return getMoments()[0]; case 1: return getMoments()[1]; case 2: return getMoments()[2]; case 3: return getMoments()[3]; case 4: return getMoments()[4]; case 5: return getMoments()[5]; case 6: return getMoments()[6]; case 7: return getMoments()[7]; case 8: return getMoments()[8]; default: return 0; } } @Override public void setOrigin(int axis, double value){ switch(axis){ case 0: getMoments()[0] = value; break; case 1: getMoments()[1] = value; break; case 2: getMoments()[2] = value; break; case 3: getMoments()[3] = value; break; case 4: getMoments()[4] = value; break; case 5: getMoments()[5] = value; break; case 6: getMoments()[6] = value; break; case 7: getMoments()[7] = value; break; case 8: getMoments()[8] = value; break; } } @Override public int numberOfDimensions(){ return 9;} @Override public double getExtension(int axis){ switch(axis){ case 0: return getExtension()[0]; case 1: return getExtension()[1]; case 2: return getExtension()[2]; case 3: return getExtension()[3]; case 4: return getExtension()[4]; case 5: return getExtension()[5]; case 6: return getExtension()[6]; case 7: return getExtension()[7]; case 8: return getExtension()[8]; default: return 0; } } @Override public void setExtension(int axis, double value){ switch(axis){ case 0: getExtension()[0] = value; break; case 1: getExtension()[1] = value; break; case 2: getExtension()[2] = value; break; case 3: getExtension()[3] = value; break; case 4: getExtension()[4] = value; break; case 5: getExtension()[5] = value; break; case 6: getExtension()[6] = value; break; case 7: getExtension()[7] = value; break; case 8: getExtension()[8] = value; break; } } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public double distanceTo(RectangleOneColorMoments obj){ return DistanceUtil.euclidean(this, obj); } } 