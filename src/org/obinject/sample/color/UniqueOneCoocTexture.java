package org.obinject.sample.color; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneCoocTexture extends $CoocTexture implements Sort<UniqueOneCoocTexture>, Comparable<UniqueOneCoocTexture> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneCoocTexture.classId == null) {UniqueOneCoocTexture.classId = Uuid.fromString("3D947CDB-4EF7-5B9D-4A04-7346820B687A"); }return UniqueOneCoocTexture.classId; } public UniqueOneCoocTexture(){} public UniqueOneCoocTexture($CoocTexture obj){ super(obj); } public UniqueOneCoocTexture(CoocTexture obj, Uuid uuid){ super(obj, uuid); } public UniqueOneCoocTexture(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneCoocTexture obj) { return (this.getId() == obj.getId()); } @Override public int compareTo(UniqueOneCoocTexture obj) { if ((this.getId() < obj.getId())) { return -1; } else if ((this.getId() == obj.getId())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneCoocTexture> getKeyStructure() { return uniqueOneCoocTextureStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setId(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getId()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 