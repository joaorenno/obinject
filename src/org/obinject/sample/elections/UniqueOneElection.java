package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneElection extends $Election implements Sort<UniqueOneElection>, Comparable<UniqueOneElection> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneElection.classId == null) {UniqueOneElection.classId = Uuid.fromString("60232565-3E29-4B84-80B4-D4917B71AFFF"); }return UniqueOneElection.classId; } public UniqueOneElection(){} public UniqueOneElection($Election obj){ super(obj); } public UniqueOneElection(Election obj, Uuid uuid){ super(obj, uuid); } public UniqueOneElection(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneElection obj) { return (this.getYearElection() == obj.getYearElection()); } @Override public int compareTo(UniqueOneElection obj) { if ((this.getYearElection() < obj.getYearElection())) { return -1; } else if ((this.getYearElection() == obj.getYearElection())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneElection> getKeyStructure() { return uniqueOneElectionStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setYearElection(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getYearElection()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 