package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneVote extends $Vote implements Sort<UniqueOneVote>, Comparable<UniqueOneVote> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneVote.classId == null) {UniqueOneVote.classId = Uuid.fromString("05D2DCC8-FF1A-1396-80B4-89D320776B98"); }return UniqueOneVote.classId; } public UniqueOneVote(){} public UniqueOneVote($Vote obj){ super(obj); } public UniqueOneVote(Vote obj, Uuid uuid){ super(obj, uuid); } public UniqueOneVote(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneVote obj) { return (this.getRegister() == obj.getRegister()); } @Override public int compareTo(UniqueOneVote obj) { if ((this.getRegister() < obj.getRegister())) { return -1; } else if ((this.getRegister() == obj.getRegister())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneVote> getKeyStructure() { return uniqueOneVoteStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setRegister(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getRegister()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 