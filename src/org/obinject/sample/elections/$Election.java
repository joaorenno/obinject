package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Election extends Election implements Entity<$Election> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Election.classId == null) {$Election.classId = Uuid.fromString("FD042493-C735-995B-9CFD-41A0342A333B"); }return $Election.classId; } public static final BTreeEntity<$Election> entityStructure = new BTreeEntity<$Election>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final BTree<UniqueOneElection> uniqueOneElectionStructure = new BTree<UniqueOneElection>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final Attribute<Integer> yearElection = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Election)entity).getYearElection(); } }; public static final Attribute<Boolean> monitored = new Attribute<Boolean> (){ @Override public Boolean valueOfAttribute(Entity entity) { return ((Election)entity).isMonitored(); } }; public $Election(){ this.uuid = Uuid.generator(); } public $Election(Election obj){ this.setYearElection(obj.getYearElection()); this.setMonitored(obj.isMonitored()); this.uuid = Uuid.generator(); } public $Election(Election obj, Uuid uuid){ this.setYearElection(obj.getYearElection()); this.setMonitored(obj.isMonitored()); this.uuid = uuid; } public $Election($Election obj){ this.setYearElection(obj.getYearElection()); this.setMonitored(obj.isMonitored()); this.uuid = obj.getUuid();; } public $Election(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Election obj) { return (this.getYearElection() == obj.getYearElection()) && (this.isMonitored() == obj.isMonitored()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Election> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Election.find(this); if(uuidInject == null){ $Election.entityStructure.add(this); UniqueOneElection.uniqueOneElectionStructure.add(new UniqueOneElection(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Election.find(this); if(uuidReject != null){ UniqueOneElection.uniqueOneElectionStructure.remove(new UniqueOneElection(this, this.getUuid())); $Election.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Election.find(this); $Election entityOld = $Election.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneElection uniqueOneElectionOld = new UniqueOneElection(entityOld, entityOld.getUuid()); UniqueOneElection uniqueOneElectionNew = new UniqueOneElection(this, entityOld.getUuid()); if(uniqueOneElectionOld.hasSameKey(uniqueOneElectionNew)){ $Election.uniqueOneElectionStructure.remove(uniqueOneElectionOld); $Election.uniqueOneElectionStructure.add(uniqueOneElectionNew); } this.uuid = uuidOld; $Election.entityStructure.remove(entityOld); $Election.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Election entity) { UniqueOneElection unique = new UniqueOneElection (entity, entity.getUuid()); return $Election.uniqueOneElectionStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Election.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setYearElection(pull.pullInteger()); this.setMonitored(pull.pullBoolean()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Election.classId); push.pushUuid(uuid); push.pushInteger(this.getYearElection()); push.pushBoolean(this.isMonitored()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfBoolean; } static{ yearElection.getSchemas().add( new Schema<$Election, UniqueOneElection, Integer>() { @Override public $Election newEntity(Integer value) { $Election obj = new $Election(); obj.setYearElection(value); return obj; } @Override public UniqueOneElection newKey(Integer value) { UniqueOneElection obj = new UniqueOneElection(); obj.setYearElection(value); return obj; } @Override public EntityStructure<$Election> getEntityStructure() { return $Election.entityStructure; } @Override public KeyStructure<UniqueOneElection> getKeyStructure() { return UniqueOneElection.uniqueOneElectionStructure; } } ); } } 