package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOnePerson extends $Person implements Sort<UniqueOnePerson>, Comparable<UniqueOnePerson> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOnePerson.classId == null) {UniqueOnePerson.classId = Uuid.fromString("8EC8846A-CAB1-5080-9615-6037644C237A"); }return UniqueOnePerson.classId; } public UniqueOnePerson(){} public UniqueOnePerson($Person obj){ super(obj); } public UniqueOnePerson(Person obj, Uuid uuid){ super(obj, uuid); } public UniqueOnePerson(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOnePerson obj) { return (this.getIdentityCard() == obj.getIdentityCard()); } @Override public int compareTo(UniqueOnePerson obj) { if ((this.getIdentityCard() < obj.getIdentityCard())) { return -1; } else if ((this.getIdentityCard() == obj.getIdentityCard())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOnePerson> getKeyStructure() { return uniqueOnePersonStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setIdentityCard(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getIdentityCard()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 