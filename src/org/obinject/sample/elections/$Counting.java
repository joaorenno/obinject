package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Counting extends Counting implements Entity<$Counting> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Counting.classId == null) {$Counting.classId = Uuid.fromString("20B1A26E-08F0-4D88-2708-E348DACA976D"); }return $Counting.classId; } public static final BTreeEntity<$Counting> entityStructure = new BTreeEntity<$Counting>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final BTree<UniqueOneCounting> uniqueOneCountingStructure = new BTree<UniqueOneCounting>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final Attribute<Integer> register = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Counting)entity).getRegister(); } }; public static final Attribute<Integer> total = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Counting)entity).getTotal(); } }; public static final Attribute<org.obinject.sample.elections.Candidate> candidate = new Attribute<org.obinject.sample.elections.Candidate> (){ @Override public org.obinject.sample.elections.Candidate valueOfAttribute(Entity entity) { return ((Counting)entity).getCandidate(); } }; public static final Attribute<org.obinject.sample.elections.Election> election = new Attribute<org.obinject.sample.elections.Election> (){ @Override public org.obinject.sample.elections.Election valueOfAttribute(Entity entity) { return ((Counting)entity).getElection(); } }; public $Counting(){ this.uuid = Uuid.generator(); } public $Counting(Counting obj){ this.setRegister(obj.getRegister()); this.setTotal(obj.getTotal()); this.setCandidate(obj.getCandidate()); this.setElection(obj.getElection()); this.uuid = Uuid.generator(); } public $Counting(Counting obj, Uuid uuid){ this.setRegister(obj.getRegister()); this.setTotal(obj.getTotal()); this.setCandidate(obj.getCandidate()); this.setElection(obj.getElection()); this.uuid = uuid; } public $Counting($Counting obj){ this.setRegister(obj.getRegister()); this.setTotal(obj.getTotal()); this.setCandidate(obj.getCandidate()); this.setElection(obj.getElection()); this.uuid = obj.getUuid();; } public $Counting(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidCandidate; @Override public Candidate getCandidate(){ Candidate superCandidate = super.getCandidate(); if (superCandidate == null && uuidCandidate != null) {superCandidate = $Candidate.entityStructure.find(uuidCandidate); this.setCandidate(superCandidate); }return superCandidate; }private void resetUuidCandidate() { if (this.getCandidate() != null) { if (this.getCandidate() instanceof Entity) { uuidCandidate = ((Entity) this.getCandidate()).getUuid(); } else { $Candidate entity = new $Candidate (this.getCandidate()); uuidCandidate = $Candidate.find(entity); if (uuidCandidate == null) { throw new TransientObjectException("Counting", "candidate", "Candidate"); } } } }protected Uuid uuidElection; @Override public Election getElection(){ Election superElection = super.getElection(); if (superElection == null && uuidElection != null) {superElection = $Election.entityStructure.find(uuidElection); this.setElection(superElection); }return superElection; }private void resetUuidElection() { if (this.getElection() != null) { if (this.getElection() instanceof Entity) { uuidElection = ((Entity) this.getElection()).getUuid(); } else { $Election entity = new $Election (this.getElection()); uuidElection = $Election.find(entity); if (uuidElection == null) { throw new TransientObjectException("Counting", "election", "Election"); } } } }@Override public boolean isEqual($Counting obj) { return (this.getRegister() == obj.getRegister()) && (this.getTotal() == obj.getTotal()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Counting> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Counting.find(this); if(uuidInject == null){ resetUuidCandidate(); resetUuidElection(); $Counting.entityStructure.add(this); UniqueOneCounting.uniqueOneCountingStructure.add(new UniqueOneCounting(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Counting.find(this); if(uuidReject != null){ UniqueOneCounting.uniqueOneCountingStructure.remove(new UniqueOneCounting(this, this.getUuid())); $Counting.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Counting.find(this); $Counting entityOld = $Counting.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidCandidate(); resetUuidElection(); UniqueOneCounting uniqueOneCountingOld = new UniqueOneCounting(entityOld, entityOld.getUuid()); UniqueOneCounting uniqueOneCountingNew = new UniqueOneCounting(this, entityOld.getUuid()); if(uniqueOneCountingOld.hasSameKey(uniqueOneCountingNew)){ $Counting.uniqueOneCountingStructure.remove(uniqueOneCountingOld); $Counting.uniqueOneCountingStructure.add(uniqueOneCountingNew); } this.uuid = uuidOld; $Counting.entityStructure.remove(entityOld); $Counting.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Counting entity) { UniqueOneCounting unique = new UniqueOneCounting (entity, entity.getUuid()); return $Counting.uniqueOneCountingStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Counting.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setRegister(pull.pullInteger()); this.setTotal(pull.pullInteger()); int totalCandidate = pull.pullInteger(); if(totalCandidate > 0){this.uuidCandidate = pull.pullUuid(); }int totalElection = pull.pullInteger(); if(totalElection > 0){this.uuidElection = pull.pullUuid(); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Counting.classId); push.pushUuid(uuid); push.pushInteger(this.getRegister()); push.pushInteger(this.getTotal()); if (this.uuidCandidate != null) { push.pushInteger(1); push.pushUuid(this.uuidCandidate); } else {push.pushInteger(0); } if (this.uuidElection != null) { push.pushInteger(1); push.pushUuid(this.uuidElection); } else {push.pushInteger(0); } } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfInteger + Page.sizeOfEntity(this.uuidCandidate) + Page.sizeOfEntity(this.uuidElection); } static{ register.getSchemas().add( new Schema<$Counting, UniqueOneCounting, Integer>() { @Override public $Counting newEntity(Integer value) { $Counting obj = new $Counting(); obj.setRegister(value); return obj; } @Override public UniqueOneCounting newKey(Integer value) { UniqueOneCounting obj = new UniqueOneCounting(); obj.setRegister(value); return obj; } @Override public EntityStructure<$Counting> getEntityStructure() { return $Counting.entityStructure; } @Override public KeyStructure<UniqueOneCounting> getKeyStructure() { return UniqueOneCounting.uniqueOneCountingStructure; } } ); } } 