package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Party extends Party implements Entity<$Party> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Party.classId == null) {$Party.classId = Uuid.fromString("25705EB1-1E19-E1C2-B619-A9E4E4B546ED"); }return $Party.classId; } public static final BTreeEntity<$Party> entityStructure = new BTreeEntity<$Party>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final BTree<UniqueOneParty> uniqueOnePartyStructure = new BTree<UniqueOneParty>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final Attribute<java.lang.String> name = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Party)entity).getName(); } }; public static final Attribute<java.lang.String> office = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Party)entity).getOffice(); } }; public $Party(){ this.uuid = Uuid.generator(); } public $Party(Party obj){ this.setName(obj.getName()); this.setOffice(obj.getOffice()); this.uuid = Uuid.generator(); } public $Party(Party obj, Uuid uuid){ this.setName(obj.getName()); this.setOffice(obj.getOffice()); this.uuid = uuid; } public $Party($Party obj){ this.setName(obj.getName()); this.setOffice(obj.getOffice()); this.uuid = obj.getUuid();; } public $Party(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Party obj) {  return (((this.getName() == null) && (obj.getName() == null)) || ((this.getName() != null) && (obj.getName() != null) && (this.getName().equals( obj.getName())))) && (((this.getOffice() == null) && (obj.getOffice() == null)) || ((this.getOffice() != null) && (obj.getOffice() != null) && (this.getOffice().equals( obj.getOffice())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Party> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Party.find(this); if(uuidInject == null){ $Party.entityStructure.add(this); UniqueOneParty.uniqueOnePartyStructure.add(new UniqueOneParty(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Party.find(this); if(uuidReject != null){ UniqueOneParty.uniqueOnePartyStructure.remove(new UniqueOneParty(this, this.getUuid())); $Party.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Party.find(this); $Party entityOld = $Party.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneParty uniqueOnePartyOld = new UniqueOneParty(entityOld, entityOld.getUuid()); UniqueOneParty uniqueOnePartyNew = new UniqueOneParty(this, entityOld.getUuid()); if(uniqueOnePartyOld.hasSameKey(uniqueOnePartyNew)){ $Party.uniqueOnePartyStructure.remove(uniqueOnePartyOld); $Party.uniqueOnePartyStructure.add(uniqueOnePartyNew); } this.uuid = uuidOld; $Party.entityStructure.remove(entityOld); $Party.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Party entity) { UniqueOneParty unique = new UniqueOneParty (entity, entity.getUuid()); return $Party.uniqueOnePartyStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Party.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setName(pull.pullString()); this.setOffice(pull.pullString()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Party.classId); push.pushUuid(uuid); push.pushString(this.getName()); push.pushString(this.getOffice()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getName()) + Page.sizeOfString(this.getOffice()); } static{ name.getSchemas().add( new Schema<$Party, UniqueOneParty, java.lang.String>() { @Override public $Party newEntity(java.lang.String value) { $Party obj = new $Party(); obj.setName(value); return obj; } @Override public UniqueOneParty newKey(java.lang.String value) { UniqueOneParty obj = new UniqueOneParty(); obj.setName(value); return obj; } @Override public EntityStructure<$Party> getEntityStructure() { return $Party.entityStructure; } @Override public KeyStructure<UniqueOneParty> getKeyStructure() { return UniqueOneParty.uniqueOnePartyStructure; } } ); } } 