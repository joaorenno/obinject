package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Representative extends Representative implements Entity<$Representative> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Representative.classId == null) {$Representative.classId = Uuid.fromString("D28D8A10-4D40-9C15-7E4E-0CF47B9AEDDA"); }return $Representative.classId; } public static final BTreeEntity<$Representative> entityStructure = new BTreeEntity<$Representative>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final Attribute<Integer> identityCard = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Representative)entity).getIdentityCard(); } }; public static final Attribute<java.lang.String> name = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Representative)entity).getName(); } }; public static final Attribute<java.lang.String> adress = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Representative)entity).getAdress(); } }; public static final Attribute<java.lang.String> candidateName = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Representative)entity).getCandidateName(); } }; public static final Attribute<java.lang.String> candidateState = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Representative)entity).getCandidateState(); } }; public static final Attribute<java.lang.String> prefixName = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Representative)entity).getPrefixName(); } }; public static final Attribute<Boolean> isSpeaker = new Attribute<Boolean> (){ @Override public Boolean valueOfAttribute(Entity entity) { return ((Representative)entity).isIsSpeaker(); } }; public $Representative(){ this.uuid = Uuid.generator(); } public $Representative(Representative obj){ this.setIdentityCard(obj.getIdentityCard()); this.setName(obj.getName()); this.setAdress(obj.getAdress()); this.setCandidateName(obj.getCandidateName()); this.setCandidateState(obj.getCandidateState()); this.setPrefixName(obj.getPrefixName()); this.setIsSpeaker(obj.isIsSpeaker()); this.uuid = Uuid.generator(); } public $Representative(Representative obj, Uuid uuid){ this.setIdentityCard(obj.getIdentityCard()); this.setName(obj.getName()); this.setAdress(obj.getAdress()); this.setCandidateName(obj.getCandidateName()); this.setCandidateState(obj.getCandidateState()); this.setPrefixName(obj.getPrefixName()); this.setIsSpeaker(obj.isIsSpeaker()); this.uuid = uuid; } public $Representative($Representative obj){ this.setIdentityCard(obj.getIdentityCard()); this.setName(obj.getName()); this.setAdress(obj.getAdress()); this.setCandidateName(obj.getCandidateName()); this.setCandidateState(obj.getCandidateState()); this.setPrefixName(obj.getPrefixName()); this.setIsSpeaker(obj.isIsSpeaker()); this.uuid = obj.getUuid();; } public $Representative(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Representative obj) { return (this.getIdentityCard() == obj.getIdentityCard()) && (((this.getName() == null) && (obj.getName() == null)) || ((this.getName() != null) && (obj.getName() != null) && (this.getName().equals( obj.getName())))) && (((this.getAdress() == null) && (obj.getAdress() == null)) || ((this.getAdress() != null) && (obj.getAdress() != null) && (this.getAdress().equals( obj.getAdress())))) && (((this.getCandidateName() == null) && (obj.getCandidateName() == null)) || ((this.getCandidateName() != null) && (obj.getCandidateName() != null) && (this.getCandidateName().equals( obj.getCandidateName())))) && (((this.getCandidateState() == null) && (obj.getCandidateState() == null)) || ((this.getCandidateState() != null) && (obj.getCandidateState() != null) && (this.getCandidateState().equals( obj.getCandidateState())))) && (((this.getPrefixName() == null) && (obj.getPrefixName() == null)) || ((this.getPrefixName() != null) && (obj.getPrefixName() != null) && (this.getPrefixName().equals( obj.getPrefixName())))) && (this.isIsSpeaker() == obj.isIsSpeaker()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Representative> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Representative.find(this); if(uuidInject == null){ $Representative.entityStructure.add(this); UniqueOnePerson.uniqueOnePersonStructure.add(new UniqueOnePerson(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Representative.find(this); if(uuidReject != null){ UniqueOnePerson.uniqueOnePersonStructure.remove(new UniqueOnePerson(this, this.getUuid())); $Representative.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Representative.find(this); $Representative entityOld = $Representative.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOnePerson uniqueOnePersonOld = new UniqueOnePerson(entityOld, entityOld.getUuid()); UniqueOnePerson uniqueOnePersonNew = new UniqueOnePerson(this, entityOld.getUuid()); if(uniqueOnePersonOld.hasSameKey(uniqueOnePersonNew)){ $Person.uniqueOnePersonStructure.remove(uniqueOnePersonOld); $Person.uniqueOnePersonStructure.add(uniqueOnePersonNew); } this.uuid = uuidOld; $Representative.entityStructure.remove(entityOld); $Representative.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Representative entity) { UniqueOnePerson unique = new UniqueOnePerson (entity, entity.getUuid()); return $Person.uniqueOnePersonStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Representative.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setIdentityCard(pull.pullInteger()); this.setName(pull.pullString()); this.setAdress(pull.pullString()); this.setCandidateName(pull.pullString()); this.setCandidateState(pull.pullString()); this.setPrefixName(pull.pullString()); this.setIsSpeaker(pull.pullBoolean()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Representative.classId); push.pushUuid(uuid); push.pushInteger(this.getIdentityCard()); push.pushString(this.getName()); push.pushString(this.getAdress()); push.pushString(this.getCandidateName()); push.pushString(this.getCandidateState()); push.pushString(this.getPrefixName()); push.pushBoolean(this.isIsSpeaker()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfString(this.getName()) + Page.sizeOfString(this.getAdress()) + Page.sizeOfString(this.getCandidateName()) + Page.sizeOfString(this.getCandidateState()) + Page.sizeOfString(this.getPrefixName()) + Page.sizeOfBoolean; } static{ identityCard.getSchemas().add( new Schema<$Representative, UniqueOnePerson, Integer>() { @Override public $Representative newEntity(Integer value) { $Representative obj = new $Representative(); obj.setIdentityCard(value); return obj; } @Override public UniqueOnePerson newKey(Integer value) { UniqueOnePerson obj = new UniqueOnePerson(); obj.setIdentityCard(value); return obj; } @Override public EntityStructure<$Representative> getEntityStructure() { return $Representative.entityStructure; } @Override public KeyStructure<UniqueOnePerson> getKeyStructure() { return UniqueOnePerson.uniqueOnePersonStructure; } } ); } } 