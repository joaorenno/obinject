package org.obinject.sample.elections; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Vote extends Vote implements Entity<$Vote> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Vote.classId == null) {$Vote.classId = Uuid.fromString("8BB9008F-A8D6-3BA3-00FD-70DE8B170CC4"); }return $Vote.classId; } public static final BTreeEntity<$Vote> entityStructure = new BTreeEntity<$Vote>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final BTree<UniqueOneVote> uniqueOneVoteStructure = new BTree<UniqueOneVote>(new File("build/classes/org/obinject/sample/elections/elections.dbo", 4096)){}; public static final Attribute<Integer> register = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Vote)entity).getRegister(); } }; public static final Attribute<java.util.Date> instante = new Attribute<java.util.Date> (){ @Override public java.util.Date valueOfAttribute(Entity entity) { return ((Vote)entity).getInstante(); } }; public static final Attribute<org.obinject.sample.elections.Elector> elector = new Attribute<org.obinject.sample.elections.Elector> (){ @Override public org.obinject.sample.elections.Elector valueOfAttribute(Entity entity) { return ((Vote)entity).getElector(); } }; public static final Attribute<org.obinject.sample.elections.Election> election = new Attribute<org.obinject.sample.elections.Election> (){ @Override public org.obinject.sample.elections.Election valueOfAttribute(Entity entity) { return ((Vote)entity).getElection(); } }; public static final Attribute<org.obinject.sample.elections.Representative> representative = new Attribute<org.obinject.sample.elections.Representative> (){ @Override public org.obinject.sample.elections.Representative valueOfAttribute(Entity entity) { return ((Vote)entity).getRepresentative(); } }; public static final Attribute<org.obinject.sample.elections.Senator> senator = new Attribute<org.obinject.sample.elections.Senator> (){ @Override public org.obinject.sample.elections.Senator valueOfAttribute(Entity entity) { return ((Vote)entity).getSenator(); } }; public $Vote(){ this.uuid = Uuid.generator(); } public $Vote(Vote obj){ this.setRegister(obj.getRegister()); this.setInstante(obj.getInstante()); this.setElector(obj.getElector()); this.setElection(obj.getElection()); this.setRepresentative(obj.getRepresentative()); this.setSenator(obj.getSenator()); this.uuid = Uuid.generator(); } public $Vote(Vote obj, Uuid uuid){ this.setRegister(obj.getRegister()); this.setInstante(obj.getInstante()); this.setElector(obj.getElector()); this.setElection(obj.getElection()); this.setRepresentative(obj.getRepresentative()); this.setSenator(obj.getSenator()); this.uuid = uuid; } public $Vote($Vote obj){ this.setRegister(obj.getRegister()); this.setInstante(obj.getInstante()); this.setElector(obj.getElector()); this.setElection(obj.getElection()); this.setRepresentative(obj.getRepresentative()); this.setSenator(obj.getSenator()); this.uuid = obj.getUuid();; } public $Vote(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidElector; @Override public Elector getElector(){ Elector superElector = super.getElector(); if (superElector == null && uuidElector != null) {superElector = $Elector.entityStructure.find(uuidElector); this.setElector(superElector); }return superElector; }private void resetUuidElector() { if (this.getElector() != null) { if (this.getElector() instanceof Entity) { uuidElector = ((Entity) this.getElector()).getUuid(); } else { $Elector entity = new $Elector (this.getElector()); uuidElector = $Elector.find(entity); if (uuidElector == null) { throw new TransientObjectException("Vote", "elector", "Elector"); } } } }protected Uuid uuidElection; @Override public Election getElection(){ Election superElection = super.getElection(); if (superElection == null && uuidElection != null) {superElection = $Election.entityStructure.find(uuidElection); this.setElection(superElection); }return superElection; }private void resetUuidElection() { if (this.getElection() != null) { if (this.getElection() instanceof Entity) { uuidElection = ((Entity) this.getElection()).getUuid(); } else { $Election entity = new $Election (this.getElection()); uuidElection = $Election.find(entity); if (uuidElection == null) { throw new TransientObjectException("Vote", "election", "Election"); } } } }protected Uuid uuidRepresentative; @Override public Representative getRepresentative(){ Representative superRepresentative = super.getRepresentative(); if (superRepresentative == null && uuidRepresentative != null) {superRepresentative = $Representative.entityStructure.find(uuidRepresentative); this.setRepresentative(superRepresentative); }return superRepresentative; }private void resetUuidRepresentative() { if (this.getRepresentative() != null) { if (this.getRepresentative() instanceof Entity) { uuidRepresentative = ((Entity) this.getRepresentative()).getUuid(); } else { $Representative entity = new $Representative (this.getRepresentative()); uuidRepresentative = $Representative.find(entity); if (uuidRepresentative == null) { throw new TransientObjectException("Vote", "representative", "Representative"); } } } }protected Uuid uuidSenator; @Override public Senator getSenator(){ Senator superSenator = super.getSenator(); if (superSenator == null && uuidSenator != null) {superSenator = $Senator.entityStructure.find(uuidSenator); this.setSenator(superSenator); }return superSenator; }private void resetUuidSenator() { if (this.getSenator() != null) { if (this.getSenator() instanceof Entity) { uuidSenator = ((Entity) this.getSenator()).getUuid(); } else { $Senator entity = new $Senator (this.getSenator()); uuidSenator = $Senator.find(entity); if (uuidSenator == null) { throw new TransientObjectException("Vote", "senator", "Senator"); } } } }@Override public boolean isEqual($Vote obj) { return (this.getRegister() == obj.getRegister()) && (((this.getInstante() == null) && (obj.getInstante() == null)) || ((this.getInstante() != null) && (obj.getInstante() != null) && (this.getInstante().equals( obj.getInstante())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Vote> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Vote.find(this); if(uuidInject == null){ resetUuidElector(); resetUuidElection(); resetUuidRepresentative(); resetUuidSenator(); $Vote.entityStructure.add(this); UniqueOneVote.uniqueOneVoteStructure.add(new UniqueOneVote(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Vote.find(this); if(uuidReject != null){ UniqueOneVote.uniqueOneVoteStructure.remove(new UniqueOneVote(this, this.getUuid())); $Vote.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Vote.find(this); $Vote entityOld = $Vote.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidElector(); resetUuidElection(); resetUuidRepresentative(); resetUuidSenator(); UniqueOneVote uniqueOneVoteOld = new UniqueOneVote(entityOld, entityOld.getUuid()); UniqueOneVote uniqueOneVoteNew = new UniqueOneVote(this, entityOld.getUuid()); if(uniqueOneVoteOld.hasSameKey(uniqueOneVoteNew)){ $Vote.uniqueOneVoteStructure.remove(uniqueOneVoteOld); $Vote.uniqueOneVoteStructure.add(uniqueOneVoteNew); } this.uuid = uuidOld; $Vote.entityStructure.remove(entityOld); $Vote.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Vote entity) { UniqueOneVote unique = new UniqueOneVote (entity, entity.getUuid()); return $Vote.uniqueOneVoteStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Vote.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setRegister(pull.pullInteger()); this.setInstante(pull.pullDate()); int totalElector = pull.pullInteger(); if(totalElector > 0){this.uuidElector = pull.pullUuid(); }int totalElection = pull.pullInteger(); if(totalElection > 0){this.uuidElection = pull.pullUuid(); }int totalRepresentative = pull.pullInteger(); if(totalRepresentative > 0){this.uuidRepresentative = pull.pullUuid(); }int totalSenator = pull.pullInteger(); if(totalSenator > 0){this.uuidSenator = pull.pullUuid(); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Vote.classId); push.pushUuid(uuid); push.pushInteger(this.getRegister()); push.pushDate(this.getInstante()); if (this.uuidElector != null) { push.pushInteger(1); push.pushUuid(this.uuidElector); } else {push.pushInteger(0); } if (this.uuidElection != null) { push.pushInteger(1); push.pushUuid(this.uuidElection); } else {push.pushInteger(0); } if (this.uuidRepresentative != null) { push.pushInteger(1); push.pushUuid(this.uuidRepresentative); } else {push.pushInteger(0); } if (this.uuidSenator != null) { push.pushInteger(1); push.pushUuid(this.uuidSenator); } else {push.pushInteger(0); } } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfDate + Page.sizeOfEntity(this.uuidElector) + Page.sizeOfEntity(this.uuidElection) + Page.sizeOfEntity(this.uuidRepresentative) + Page.sizeOfEntity(this.uuidSenator); } static{ register.getSchemas().add( new Schema<$Vote, UniqueOneVote, Integer>() { @Override public $Vote newEntity(Integer value) { $Vote obj = new $Vote(); obj.setRegister(value); return obj; } @Override public UniqueOneVote newKey(Integer value) { UniqueOneVote obj = new UniqueOneVote(); obj.setRegister(value); return obj; } @Override public EntityStructure<$Vote> getEntityStructure() { return $Vote.entityStructure; } @Override public KeyStructure<UniqueOneVote> getKeyStructure() { return UniqueOneVote.uniqueOneVoteStructure; } } ); } } 