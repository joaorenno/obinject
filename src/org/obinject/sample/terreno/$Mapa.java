package org.obinject.sample.terreno; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Mapa extends Mapa implements Entity<$Mapa> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Mapa.classId == null) {$Mapa.classId = Uuid.fromString("DD2E80CF-4A15-FE65-E709-1691FAA55546"); }return $Mapa.classId; } public static final BTreeEntity<$Mapa> entityStructure = new BTreeEntity<$Mapa>(new File("build/classes/org/obinject/sample/terreno/terreno.dbo", 4096)){}; public static final BTree<UniqueOneMapa> uniqueOneMapaStructure = new BTree<UniqueOneMapa>(new File("build/classes/org/obinject/sample/terreno/terreno.dbo", 4096)){}; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Mapa)entity).getNome(); } }; public static final Attribute<java.lang.String> utilidade = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Mapa)entity).getUtilidade(); } }; public static final Attribute<java.util.List> terrenos = new Attribute<java.util.List> (){ @Override public java.util.List valueOfAttribute(Entity entity) { return ((Mapa)entity).getTerrenos(); } }; public $Mapa(){ this.uuid = Uuid.generator(); } public $Mapa(Mapa obj){ this.setNome(obj.getNome()); this.setUtilidade(obj.getUtilidade()); this.setTerrenos(obj.getTerrenos()); this.uuid = Uuid.generator(); } public $Mapa(Mapa obj, Uuid uuid){ this.setNome(obj.getNome()); this.setUtilidade(obj.getUtilidade()); this.setTerrenos(obj.getTerrenos()); this.uuid = uuid; } public $Mapa($Mapa obj){ this.setNome(obj.getNome()); this.setUtilidade(obj.getUtilidade()); this.setTerrenos(obj.getTerrenos()); this.uuid = obj.getUuid();; } public $Mapa(Uuid uuid){ this.uuid = uuid; } protected java.util.List<Uuid> uuidTerrenos = new java.util.ArrayList<>(); @Override public java.util.List<org.obinject.sample.terreno.Terreno> getTerrenos() {java.util.List<org.obinject.sample.terreno.Terreno> superTerrenos = super.getTerrenos(); if ((superTerrenos.isEmpty()) && (!uuidTerrenos.isEmpty())) {for (Uuid uuid : uuidTerrenos) {superTerrenos.add($Terreno.entityStructure.find(uuid)); } }return superTerrenos; }private void resetUuidTerrenos(){ uuidTerrenos.clear(); if (this.getTerrenos() != null) {for (Terreno obj : this.getTerrenos()) { if (obj instanceof Entity) { uuidTerrenos.add(((Entity) obj).getUuid()); } else { $Terreno entity = new $Terreno (obj); uuidTerrenos.add($Terreno.find(entity)); if (uuidTerrenos == null) { throw new TransientObjectException("Mapa", "terrenos", "Terreno"); } } } } }@Override public boolean isEqual($Mapa obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (((this.getUtilidade() == null) && (obj.getUtilidade() == null)) || ((this.getUtilidade() != null) && (obj.getUtilidade() != null) && (this.getUtilidade().equals( obj.getUtilidade())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Mapa> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Mapa.find(this); if(uuidInject == null){ resetUuidTerrenos(); $Mapa.entityStructure.add(this); UniqueOneMapa.uniqueOneMapaStructure.add(new UniqueOneMapa(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Mapa.find(this); if(uuidReject != null){ UniqueOneMapa.uniqueOneMapaStructure.remove(new UniqueOneMapa(this, this.getUuid())); $Mapa.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Mapa.find(this); $Mapa entityOld = $Mapa.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidTerrenos(); UniqueOneMapa uniqueOneMapaOld = new UniqueOneMapa(entityOld, entityOld.getUuid()); UniqueOneMapa uniqueOneMapaNew = new UniqueOneMapa(this, entityOld.getUuid()); if(uniqueOneMapaOld.hasSameKey(uniqueOneMapaNew)){ $Mapa.uniqueOneMapaStructure.remove(uniqueOneMapaOld); $Mapa.uniqueOneMapaStructure.add(uniqueOneMapaNew); } this.uuid = uuidOld; $Mapa.entityStructure.remove(entityOld); $Mapa.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Mapa entity) { UniqueOneMapa unique = new UniqueOneMapa (entity, entity.getUuid()); return $Mapa.uniqueOneMapaStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Mapa.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNome(pull.pullString()); this.setUtilidade(pull.pullString()); int totalTerrenos = pull.pullInteger(); for (int i = 0; i < totalTerrenos; i++) {this.uuidTerrenos.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Mapa.classId); push.pushUuid(uuid); push.pushString(this.getNome()); push.pushString(this.getUtilidade()); push.pushInteger(this.uuidTerrenos.size()); for (Uuid uuidPush : this.uuidTerrenos) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getNome()) + Page.sizeOfString(this.getUtilidade()) + Page.sizeOfEntityCollection(this.uuidTerrenos); } static{ nome.getSchemas().add( new Schema<$Mapa, UniqueOneMapa, java.lang.String>() { @Override public $Mapa newEntity(java.lang.String value) { $Mapa obj = new $Mapa(); obj.setNome(value); return obj; } @Override public UniqueOneMapa newKey(java.lang.String value) { UniqueOneMapa obj = new UniqueOneMapa(); obj.setNome(value); return obj; } @Override public EntityStructure<$Mapa> getEntityStructure() { return $Mapa.entityStructure; } @Override public KeyStructure<UniqueOneMapa> getKeyStructure() { return UniqueOneMapa.uniqueOneMapaStructure; } } ); } } 