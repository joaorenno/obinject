package org.obinject.sample.terreno; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneTerreno extends $Terreno implements Sort<UniqueOneTerreno>, Comparable<UniqueOneTerreno> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneTerreno.classId == null) {UniqueOneTerreno.classId = Uuid.fromString("0D7BBEBE-0EC9-921E-5952-569E97001C6C"); }return UniqueOneTerreno.classId; } public UniqueOneTerreno(){} public UniqueOneTerreno($Terreno obj){ super(obj); } public UniqueOneTerreno(Terreno obj, Uuid uuid){ super(obj, uuid); } public UniqueOneTerreno(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneTerreno obj) { return (this.getRegistro() == obj.getRegistro()); } @Override public int compareTo(UniqueOneTerreno obj) { if ((this.getRegistro() < obj.getRegistro())) { return -1; } else if ((this.getRegistro() == obj.getRegistro())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneTerreno> getKeyStructure() { return uniqueOneTerrenoStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setRegistro(pull.pullLong()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushLong(this.getRegistro()); } @Override public int sizeOfKey() { return  + Page.sizeOfLong; } } 