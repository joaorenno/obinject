package org.obinject.sample.exame; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class SortOneExame extends $Exame implements Sort<SortOneExame>, Comparable<SortOneExame> { private static Uuid classId; public static Uuid getClassId(){ if (SortOneExame.classId == null) {SortOneExame.classId = Uuid.fromString("E2EB44CB-6BB8-3BB6-B4A7-808C29FB840F"); }return SortOneExame.classId; } public SortOneExame(){} public SortOneExame($Exame obj){ super(obj); } public SortOneExame(Exame obj, Uuid uuid){ super(obj, uuid); } public SortOneExame(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(SortOneExame obj) {  return (((this.getClinica() == null) && (obj.getClinica() == null)) || ((this.getClinica() != null) && (obj.getClinica() != null) && (this.getClinica().equals( obj.getClinica())))); } @Override public int compareTo(SortOneExame obj) { if (((this.getClinica() == null) || (this.getClinica() != null) && (obj.getClinica() != null) && (this.getClinica().compareTo( obj.getClinica()) < 0))) { return -1; } else if (((this.getClinica() == null) || (this.getClinica() != null) && (obj.getClinica() != null) && (this.getClinica().compareTo( obj.getClinica()) == 0))) { return 0; } else {return 1; } }@Override public KeyStructure<SortOneExame> getKeyStructure() { return sortOneExameStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setClinica(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getClinica()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getClinica()); } } 