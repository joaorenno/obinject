package org.obinject.sample.exame; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueTwoExame extends $Exame implements Sort<UniqueTwoExame>, Comparable<UniqueTwoExame> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueTwoExame.classId == null) {UniqueTwoExame.classId = Uuid.fromString("914E570E-649C-49B0-DA32-9044D4E05BE2"); }return UniqueTwoExame.classId; } public UniqueTwoExame(){} public UniqueTwoExame($Exame obj){ super(obj); } public UniqueTwoExame(Exame obj, Uuid uuid){ super(obj, uuid); } public UniqueTwoExame(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueTwoExame obj) {  return (((this.getData() == null) && (obj.getData() == null)) || ((this.getData() != null) && (obj.getData() != null) && (this.getData().equals( obj.getData())))) && (((this.getPaciente() == null) && (obj.getPaciente() == null)) || ((this.getPaciente() != null) && (obj.getPaciente() != null) && (this.getPaciente().equals( obj.getPaciente())))) && (((this.getMedico() == null) && (obj.getMedico() == null)) || ((this.getMedico() != null) && (obj.getMedico() != null) && (this.getMedico().equals( obj.getMedico())))); } @Override public int compareTo(UniqueTwoExame obj) { if (((this.getData() == null) || (this.getData() != null) && (obj.getData() != null) && (this.getData().compareTo( obj.getData()) < 0)) && ((this.getPaciente() == null) || (this.getPaciente() != null) && (obj.getPaciente() != null) && (this.getPaciente().compareTo( obj.getPaciente()) < 0)) && ((this.getMedico() == null) || (this.getMedico() != null) && (obj.getMedico() != null) && (this.getMedico().compareTo( obj.getMedico()) < 0))) { return -1; } else if (((this.getData() == null) || (this.getData() != null) && (obj.getData() != null) && (this.getData().compareTo( obj.getData()) == 0)) && ((this.getPaciente() == null) || (this.getPaciente() != null) && (obj.getPaciente() != null) && (this.getPaciente().compareTo( obj.getPaciente()) == 0)) && ((this.getMedico() == null) || (this.getMedico() != null) && (obj.getMedico() != null) && (this.getMedico().compareTo( obj.getMedico()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueTwoExame> getKeyStructure() { return uniqueTwoExameStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setData(pull.pullDate()); this.setPaciente(pull.pullString()); this.setMedico(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushDate(this.getData()); push.pushString(this.getPaciente()); push.pushString(this.getMedico()); } @Override public int sizeOfKey() { return  + Page.sizeOfDate + Page.sizeOfString(this.getPaciente()) + Page.sizeOfString(this.getMedico()); } } 