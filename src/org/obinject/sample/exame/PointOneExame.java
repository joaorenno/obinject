package org.obinject.sample.exame; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Point; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class PointOneExame extends $Exame implements Point<PointOneExame> { private double preservedDistance; private static Uuid classId; public static Uuid getClassId(){ if (PointOneExame.classId == null) {PointOneExame.classId = Uuid.fromString("EDFB1BA7-D2A8-9FB2-79BD-4EA693A6DC97"); }return PointOneExame.classId; } public PointOneExame(){} public PointOneExame($Exame obj){ super(obj); } public PointOneExame(Exame obj, Uuid uuid){ super(obj, uuid); } public PointOneExame(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(PointOneExame obj) { int i=0; while(( i < this.numberOfDimensions()) && (this.getOrigin(i) == obj.getOrigin(i))){ i++; }return i == this.numberOfDimensions(); }@Override public double getOrigin(int axis){ switch(axis){ case 0: return getLatitudeImagem(); case 1: return getLongitudeImagem(); default: return 0; } } @Override public void setOrigin(int axis, double value){ switch(axis){ case 0: setLatitudeImagem(value); break; case 1: setLongitudeImagem(value); break; } } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public int numberOfDimensions(){ return 2;} @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public double distanceTo(PointOneExame obj){ return DistanceUtil.euclidean(this, obj); } @Override public KeyStructure<PointOneExame> getKeyStructure() { return pointOneExameStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ this.setOrigin(i, pull.pullDouble()); } return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ push.pushDouble(this.getOrigin(i));} } @Override public int sizeOfKey() { return Page.sizeOfDouble * this.numberOfDimensions();} } 