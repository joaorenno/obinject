package org.obinject.sample.exame; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Edition; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class EditionOneExame extends $Exame implements Edition<EditionOneExame> { private double preservedDistance; private static Uuid classId; public static Uuid getClassId(){ if (EditionOneExame.classId == null) {EditionOneExame.classId = Uuid.fromString("944233DB-3137-8C8C-42BF-4E69ED2F5E17"); }return EditionOneExame.classId; } public EditionOneExame(){} public EditionOneExame($Exame obj){ super(obj); } public EditionOneExame(Exame obj, Uuid uuid){ super(obj, uuid); } public EditionOneExame(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(EditionOneExame obj) {  return (((this.getMedico() == null) && (obj.getMedico() == null)) || ((this.getMedico() != null) && (obj.getMedico() != null) && (this.getMedico().equals( obj.getMedico())))); } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public String getString(){ return "" + getMedico();} @Override public double distanceTo(EditionOneExame obj){ return DistanceUtil.levenshtein(this.getString(), obj.getString()); } @Override public KeyStructure<EditionOneExame> getKeyStructure() { return editionOneExameStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setMedico(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getMedico()); } @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getMedico()); } } 