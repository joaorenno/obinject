package org.obinject.sample.exame; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneExame extends $Exame implements Sort<UniqueOneExame>, Comparable<UniqueOneExame> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneExame.classId == null) {UniqueOneExame.classId = Uuid.fromString("635B5B11-F74E-85A4-EC50-B577FBCD8655"); }return UniqueOneExame.classId; } public UniqueOneExame(){} public UniqueOneExame($Exame obj){ super(obj); } public UniqueOneExame(Exame obj, Uuid uuid){ super(obj, uuid); } public UniqueOneExame(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneExame obj) {  return (((this.getNumero() == null) && (obj.getNumero() == null)) || ((this.getNumero() != null) && (obj.getNumero() != null) && (this.getNumero().equals( obj.getNumero())))); } @Override public int compareTo(UniqueOneExame obj) { if (((this.getNumero() == null) || (this.getNumero() != null) && (obj.getNumero() != null) && (this.getNumero().compareTo( obj.getNumero()) < 0))) { return -1; } else if (((this.getNumero() == null) || (this.getNumero() != null) && (obj.getNumero() != null) && (this.getNumero().compareTo( obj.getNumero()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneExame> getKeyStructure() { return uniqueOneExameStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setNumero(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getNumero()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getNumero()); } } 