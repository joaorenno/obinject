package org.obinject.sample.exame; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Metric; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; import java.awt.image.BufferedImage; import org.obinject.meta.generator.ExtractionUtil; public class FeatureOneExame extends $Exame implements Metric<FeatureOneExame> { private static Uuid classId; public static Uuid getClassId(){ if (FeatureOneExame.classId == null) {FeatureOneExame.classId = Uuid.fromString("035A7B13-337F-ABFD-B482-57624250F856"); }return FeatureOneExame.classId; } private double preservedDistance; private double featureVectorFirst[]; public FeatureOneExame(){ featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImagem()); } public FeatureOneExame($Exame obj){ super(obj); featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImagem()); } public FeatureOneExame(Exame obj, Uuid uuid){ super(obj, uuid); featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImagem()); } public FeatureOneExame(Uuid uuid){ super(uuid); featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImagem()); } @Override public boolean hasSameKey(FeatureOneExame obj) { return Page.matricesAreEqual(this.featureVectorFirst, obj.featureVectorFirst) ; } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public double distanceTo(FeatureOneExame obj){ return DistanceUtil.euclidean(this.featureVectorFirst, obj.featureVectorFirst) ; } @Override public KeyStructure<FeatureOneExame> getKeyStructure() { return featureOneExameStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); featureVectorFirst = (double[]) pull.pullMatrix(); return true; } @Override public void setImagem(BufferedImage image) {super.setImagem(image); featureVectorFirst = ExtractionUtil.histogramStatistical(this.getImagem()); } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushMatrix(featureVectorFirst); } @Override public int sizeOfKey() { return Page.sizeOfMatrix(featureVectorFirst); } } 