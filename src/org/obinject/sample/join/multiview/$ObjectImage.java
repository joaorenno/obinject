package org.obinject.sample.join.multiview; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; import org.obinject.storage.RTree; public class $ObjectImage extends ObjectImage implements Entity<$ObjectImage> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($ObjectImage.classId == null) {$ObjectImage.classId = Uuid.fromString("A78F95ED-7EBF-CB29-DCA3-1F3825E56B87"); }return $ObjectImage.classId; } public static final BTreeEntity<$ObjectImage> entityStructure = new BTreeEntity<$ObjectImage>(new File("build/classes/org/obinject/sample/join/multiview/multiview.dbo", 4096)){}; public static final BTree<UniqueOneObjectImage> uniqueOneObjectImageStructure = new BTree<UniqueOneObjectImage>(new File("build/classes/org/obinject/sample/join/multiview/multiview.dbo", 4096)){}; public static final RTree<RectangleOneObjectImage> rectangleOneObjectImageStructure = new RTree<RectangleOneObjectImage>(new File("build/classes/org/obinject/sample/join/multiview/multiview.dbo", 4096)){}; public static final MTree<PointOneObjectImage> pointOneObjectImageStructure = new MTree<PointOneObjectImage>(new File("build/classes/org/obinject/sample/join/multiview/multiview.dbo", 4096)){}; public static final Attribute<double[]> feature = new Attribute<double[]> (){ @Override public double[] valueOfAttribute(Entity entity) { return ((ObjectImage)entity).getFeature(); } }; public static final Attribute<java.lang.String> pathObject = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((ObjectImage)entity).getPathObject(); } }; public static final Attribute<java.lang.String> pathImage = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((ObjectImage)entity).getPathImage(); } }; public $ObjectImage(){ this.uuid = Uuid.generator(); } public $ObjectImage(ObjectImage obj){ this.setFeature(obj.getFeature()); this.setPathObject(obj.getPathObject()); this.setPathImage(obj.getPathImage()); this.uuid = Uuid.generator(); } public $ObjectImage(ObjectImage obj, Uuid uuid){ this.setFeature(obj.getFeature()); this.setPathObject(obj.getPathObject()); this.setPathImage(obj.getPathImage()); this.uuid = uuid; } public $ObjectImage($ObjectImage obj){ this.setFeature(obj.getFeature()); this.setPathObject(obj.getPathObject()); this.setPathImage(obj.getPathImage()); this.uuid = obj.getUuid();; } public $ObjectImage(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($ObjectImage obj) {  return (((this.getPathObject() == null) && (obj.getPathObject() == null)) || ((this.getPathObject() != null) && (obj.getPathObject() != null) && (this.getPathObject().equals( obj.getPathObject())))) && (((this.getPathImage() == null) && (obj.getPathImage() == null)) || ((this.getPathImage() != null) && (obj.getPathImage() != null) && (this.getPathImage().equals( obj.getPathImage())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$ObjectImage> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $ObjectImage.find(this); if(uuidInject == null){ $ObjectImage.entityStructure.add(this); UniqueOneObjectImage.uniqueOneObjectImageStructure.add(new UniqueOneObjectImage(this, this.getUuid())); RectangleOneObjectImage.rectangleOneObjectImageStructure.add(new RectangleOneObjectImage(this, this.getUuid())); PointOneObjectImage.pointOneObjectImageStructure.add(new PointOneObjectImage(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $ObjectImage.find(this); if(uuidReject != null){ UniqueOneObjectImage.uniqueOneObjectImageStructure.remove(new UniqueOneObjectImage(this, this.getUuid())); RectangleOneObjectImage.rectangleOneObjectImageStructure.remove(new RectangleOneObjectImage(this, this.getUuid())); PointOneObjectImage.pointOneObjectImageStructure.remove(new PointOneObjectImage(this, this.getUuid())); $ObjectImage.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $ObjectImage.find(this); $ObjectImage entityOld = $ObjectImage.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneObjectImage uniqueOneObjectImageOld = new UniqueOneObjectImage(entityOld, entityOld.getUuid()); UniqueOneObjectImage uniqueOneObjectImageNew = new UniqueOneObjectImage(this, entityOld.getUuid()); if(uniqueOneObjectImageOld.hasSameKey(uniqueOneObjectImageNew)){ $ObjectImage.uniqueOneObjectImageStructure.remove(uniqueOneObjectImageOld); $ObjectImage.uniqueOneObjectImageStructure.add(uniqueOneObjectImageNew); } RectangleOneObjectImage rectangleOneObjectImageOld = new RectangleOneObjectImage(entityOld, entityOld.getUuid()); RectangleOneObjectImage rectangleOneObjectImageNew = new RectangleOneObjectImage(this, entityOld.getUuid()); if(rectangleOneObjectImageOld.hasSameKey(rectangleOneObjectImageNew)){ $ObjectImage.rectangleOneObjectImageStructure.remove(rectangleOneObjectImageOld); $ObjectImage.rectangleOneObjectImageStructure.add(rectangleOneObjectImageNew); } PointOneObjectImage pointOneObjectImageOld = new PointOneObjectImage(entityOld, entityOld.getUuid()); PointOneObjectImage pointOneObjectImageNew = new PointOneObjectImage(this, entityOld.getUuid()); if(pointOneObjectImageOld.hasSameKey(pointOneObjectImageNew)){ $ObjectImage.pointOneObjectImageStructure.remove(pointOneObjectImageOld); $ObjectImage.pointOneObjectImageStructure.add(pointOneObjectImageNew); } this.uuid = uuidOld; $ObjectImage.entityStructure.remove(entityOld); $ObjectImage.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($ObjectImage entity) { UniqueOneObjectImage unique = new UniqueOneObjectImage (entity, entity.getUuid()); return $ObjectImage.uniqueOneObjectImageStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($ObjectImage.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setFeature((double[]) pull.pullMatrix()); this.setPathObject(pull.pullString()); this.setPathImage(pull.pullString()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($ObjectImage.classId); push.pushUuid(uuid); push.pushMatrix(getFeature()); push.pushString(this.getPathObject()); push.pushString(this.getPathImage()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfMatrix(this.getFeature()) + Page.sizeOfString(this.getPathObject()) + Page.sizeOfString(this.getPathImage()); } static{ feature.getSchemas().add( new Schema<$ObjectImage, RectangleOneObjectImage, double[]>() { @Override public $ObjectImage newEntity(double[] value) { $ObjectImage obj = new $ObjectImage(); obj.setFeature(value); return obj; } @Override public RectangleOneObjectImage newKey(double[] value) { RectangleOneObjectImage obj = new RectangleOneObjectImage(); obj.setFeature(value); return obj; } @Override public EntityStructure<$ObjectImage> getEntityStructure() { return $ObjectImage.entityStructure; } @Override public KeyStructure<RectangleOneObjectImage> getKeyStructure() { return RectangleOneObjectImage.rectangleOneObjectImageStructure; } } ); feature.getSchemas().add( new Schema<$ObjectImage, PointOneObjectImage, double[]>() { @Override public $ObjectImage newEntity(double[] value) { $ObjectImage obj = new $ObjectImage(); obj.setFeature(value); return obj; } @Override public PointOneObjectImage newKey(double[] value) { PointOneObjectImage obj = new PointOneObjectImage(); obj.setFeature(value); return obj; } @Override public EntityStructure<$ObjectImage> getEntityStructure() { return $ObjectImage.entityStructure; } @Override public KeyStructure<PointOneObjectImage> getKeyStructure() { return PointOneObjectImage.pointOneObjectImageStructure; } } ); pathImage.getSchemas().add( new Schema<$ObjectImage, UniqueOneObjectImage, java.lang.String>() { @Override public $ObjectImage newEntity(java.lang.String value) { $ObjectImage obj = new $ObjectImage(); obj.setPathImage(value); return obj; } @Override public UniqueOneObjectImage newKey(java.lang.String value) { UniqueOneObjectImage obj = new UniqueOneObjectImage(); obj.setPathImage(value); return obj; } @Override public EntityStructure<$ObjectImage> getEntityStructure() { return $ObjectImage.entityStructure; } @Override public KeyStructure<UniqueOneObjectImage> getKeyStructure() { return UniqueOneObjectImage.uniqueOneObjectImageStructure; } } ); } } 