package org.obinject.sample.join.multiview; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneObjectImage extends $ObjectImage implements Sort<UniqueOneObjectImage>, Comparable<UniqueOneObjectImage> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneObjectImage.classId == null) {UniqueOneObjectImage.classId = Uuid.fromString("DB785D27-3283-C086-659D-682FDBAAFB86"); }return UniqueOneObjectImage.classId; } public UniqueOneObjectImage(){} public UniqueOneObjectImage($ObjectImage obj){ super(obj); } public UniqueOneObjectImage(ObjectImage obj, Uuid uuid){ super(obj, uuid); } public UniqueOneObjectImage(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneObjectImage obj) {  return (((this.getPathImage() == null) && (obj.getPathImage() == null)) || ((this.getPathImage() != null) && (obj.getPathImage() != null) && (this.getPathImage().equals( obj.getPathImage())))); } @Override public int compareTo(UniqueOneObjectImage obj) { if (((this.getPathImage() == null) || (this.getPathImage() != null) && (obj.getPathImage() != null) && (this.getPathImage().compareTo( obj.getPathImage()) < 0))) { return -1; } else if (((this.getPathImage() == null) || (this.getPathImage() != null) && (obj.getPathImage() != null) && (this.getPathImage().compareTo( obj.getPathImage()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneObjectImage> getKeyStructure() { return uniqueOneObjectImageStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setPathImage(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getPathImage()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getPathImage()); } } 