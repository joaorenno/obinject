package org.obinject.sample.join.uniform; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOnePonto extends $Ponto implements Sort<UniqueOnePonto>, Comparable<UniqueOnePonto> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOnePonto.classId == null) {UniqueOnePonto.classId = Uuid.fromString("5F07DD93-D9D0-B432-6FD9-607259565272"); }return UniqueOnePonto.classId; } public UniqueOnePonto(){} public UniqueOnePonto($Ponto obj){ super(obj); } public UniqueOnePonto(Ponto obj, Uuid uuid){ super(obj, uuid); } public UniqueOnePonto(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOnePonto obj) {  return (((this.getIdentifier() == null) && (obj.getIdentifier() == null)) || ((this.getIdentifier() != null) && (obj.getIdentifier() != null) && (this.getIdentifier().equals( obj.getIdentifier())))); } @Override public int compareTo(UniqueOnePonto obj) { if (((this.getIdentifier() == null) || (this.getIdentifier() != null) && (obj.getIdentifier() != null) && (this.getIdentifier().compareTo( obj.getIdentifier()) < 0))) { return -1; } else if (((this.getIdentifier() == null) || (this.getIdentifier() != null) && (obj.getIdentifier() != null) && (this.getIdentifier().compareTo( obj.getIdentifier()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOnePonto> getKeyStructure() { return uniqueOnePontoStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setIdentifier(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getIdentifier()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getIdentifier()); } } 