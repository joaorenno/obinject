package org.obinject.sample.celular; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class SortOneCelular extends $Celular implements Sort<SortOneCelular>, Comparable<SortOneCelular> { private static Uuid classId; public static Uuid getClassId(){ if (SortOneCelular.classId == null) {SortOneCelular.classId = Uuid.fromString("7DB71B96-16D1-2481-0DB1-A6941CE55E8F"); }return SortOneCelular.classId; } public SortOneCelular(){} public SortOneCelular($Celular obj){ super(obj); } public SortOneCelular(Celular obj, Uuid uuid){ super(obj, uuid); } public SortOneCelular(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(SortOneCelular obj) {  return (((this.getDono() == null) && (obj.getDono() == null)) || ((this.getDono() != null) && (obj.getDono() != null) && (this.getDono().equals( obj.getDono())))); } @Override public int compareTo(SortOneCelular obj) { if (((this.getDono() == null) || (this.getDono() != null) && (obj.getDono() != null) && (this.getDono().compareTo( obj.getDono()) < 0))) { return -1; } else if (((this.getDono() == null) || (this.getDono() != null) && (obj.getDono() != null) && (this.getDono().compareTo( obj.getDono()) == 0))) { return 0; } else {return 1; } }@Override public KeyStructure<SortOneCelular> getKeyStructure() { return sortOneCelularStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setDono(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getDono()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getDono()); } } 