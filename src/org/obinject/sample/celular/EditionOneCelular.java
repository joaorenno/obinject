package org.obinject.sample.celular; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Edition; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class EditionOneCelular extends $Celular implements Edition<EditionOneCelular> { private double preservedDistance; private static Uuid classId; public static Uuid getClassId(){ if (EditionOneCelular.classId == null) {EditionOneCelular.classId = Uuid.fromString("A3241047-8AE1-571A-36D5-B3196B554C0D"); }return EditionOneCelular.classId; } public EditionOneCelular(){} public EditionOneCelular($Celular obj){ super(obj); } public EditionOneCelular(Celular obj, Uuid uuid){ super(obj, uuid); } public EditionOneCelular(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(EditionOneCelular obj) {  return (((this.getDono() == null) && (obj.getDono() == null)) || ((this.getDono() != null) && (obj.getDono() != null) && (this.getDono().equals( obj.getDono())))); } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public String getString(){ return "" + getDono();} @Override public double distanceTo(EditionOneCelular obj){ return DistanceUtil.levenshtein(this.getString(), obj.getString()); } @Override public KeyStructure<EditionOneCelular> getKeyStructure() { return editionOneCelularStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setDono(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getDono()); } @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getDono()); } } 