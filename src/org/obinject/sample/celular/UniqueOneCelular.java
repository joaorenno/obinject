package org.obinject.sample.celular; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneCelular extends $Celular implements Sort<UniqueOneCelular>, Comparable<UniqueOneCelular> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneCelular.classId == null) {UniqueOneCelular.classId = Uuid.fromString("B4360210-F3DE-79CC-FBB8-DD1BBDD62E4B"); }return UniqueOneCelular.classId; } public UniqueOneCelular(){} public UniqueOneCelular($Celular obj){ super(obj); } public UniqueOneCelular(Celular obj, Uuid uuid){ super(obj, uuid); } public UniqueOneCelular(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneCelular obj) { return (this.getNumero() == obj.getNumero()); } @Override public int compareTo(UniqueOneCelular obj) { if ((this.getNumero() < obj.getNumero())) { return -1; } else if ((this.getNumero() == obj.getNumero())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneCelular> getKeyStructure() { return uniqueOneCelularStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setNumero(pull.pullLong()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushLong(this.getNumero()); } @Override public int sizeOfKey() { return  + Page.sizeOfLong; } } 