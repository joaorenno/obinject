package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneConexao extends $Conexao implements Sort<UniqueOneConexao>, Comparable<UniqueOneConexao> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneConexao.classId == null) {UniqueOneConexao.classId = Uuid.fromString("2674B762-A092-BD9F-A350-E6231BF97824"); }return UniqueOneConexao.classId; } public UniqueOneConexao(){} public UniqueOneConexao($Conexao obj){ super(obj); } public UniqueOneConexao(Conexao obj, Uuid uuid){ super(obj, uuid); } public UniqueOneConexao(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneConexao obj) {  return (((this.getTipo() == null) && (obj.getTipo() == null)) || ((this.getTipo() != null) && (obj.getTipo() != null) && (this.getTipo().equals( obj.getTipo())))); } @Override public int compareTo(UniqueOneConexao obj) { if (((this.getTipo() == null) || (this.getTipo() != null) && (obj.getTipo() != null) && (this.getTipo().compareTo( obj.getTipo()) < 0))) { return -1; } else if (((this.getTipo() == null) || (this.getTipo() != null) && (obj.getTipo() != null) && (this.getTipo().compareTo( obj.getTipo()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneConexao> getKeyStructure() { return uniqueOneConexaoStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setTipo(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getTipo()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getTipo()); } } 