package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneBatalha extends $Batalha implements Sort<UniqueOneBatalha>, Comparable<UniqueOneBatalha> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneBatalha.classId == null) {UniqueOneBatalha.classId = Uuid.fromString("178E8611-FAA8-FE3F-CF96-CC1C2CCB733C"); }return UniqueOneBatalha.classId; } public UniqueOneBatalha(){} public UniqueOneBatalha($Batalha obj){ super(obj); } public UniqueOneBatalha(Batalha obj, Uuid uuid){ super(obj, uuid); } public UniqueOneBatalha(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneBatalha obj) { return (this.getNum() == obj.getNum()); } @Override public int compareTo(UniqueOneBatalha obj) { if ((this.getNum() < obj.getNum())) { return -1; } else if ((this.getNum() == obj.getNum())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneBatalha> getKeyStructure() { return uniqueOneBatalhaStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setNum(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getNum()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 