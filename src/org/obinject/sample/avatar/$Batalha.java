package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Batalha extends Batalha implements Entity<$Batalha> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Batalha.classId == null) {$Batalha.classId = Uuid.fromString("151DFB1D-FEDE-87EB-FD02-8AAA26E9BD54"); }return $Batalha.classId; } public static final BTreeEntity<$Batalha> entityStructure = new BTreeEntity<$Batalha>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final BTree<UniqueOneBatalha> uniqueOneBatalhaStructure = new BTree<UniqueOneBatalha>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<Integer> num = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Batalha)entity).getNum(); } }; public static final Attribute<Float> duracao = new Attribute<Float> (){ @Override public Float valueOfAttribute(Entity entity) { return ((Batalha)entity).getDuracao(); } }; public static final Attribute<java.util.List> humano = new Attribute<java.util.List> (){ @Override public java.util.List valueOfAttribute(Entity entity) { return ((Batalha)entity).getHumano(); } }; public static final Attribute<java.util.List> batalha = new Attribute<java.util.List> (){ @Override public java.util.List valueOfAttribute(Entity entity) { return ((Batalha)entity).getBatalha(); } }; public $Batalha(){ this.uuid = Uuid.generator(); } public $Batalha(Batalha obj){ this.setNum(obj.getNum()); this.setDuracao(obj.getDuracao()); this.setHumano(obj.getHumano()); this.setBatalha(obj.getBatalha()); this.uuid = Uuid.generator(); } public $Batalha(Batalha obj, Uuid uuid){ this.setNum(obj.getNum()); this.setDuracao(obj.getDuracao()); this.setHumano(obj.getHumano()); this.setBatalha(obj.getBatalha()); this.uuid = uuid; } public $Batalha($Batalha obj){ this.setNum(obj.getNum()); this.setDuracao(obj.getDuracao()); this.setHumano(obj.getHumano()); this.setBatalha(obj.getBatalha()); this.uuid = obj.getUuid();; } public $Batalha(Uuid uuid){ this.uuid = uuid; } protected java.util.List<Uuid> uuidHumano = new java.util.ArrayList<>(); @Override public java.util.List<org.obinject.sample.avatar.Humano> getHumano() {java.util.List<org.obinject.sample.avatar.Humano> superHumano = super.getHumano(); if ((superHumano.isEmpty()) && (!uuidHumano.isEmpty())) {for (Uuid uuid : uuidHumano) {superHumano.add($Humano.entityStructure.find(uuid)); } }return superHumano; }private void resetUuidHumano(){ uuidHumano.clear(); if (this.getHumano() != null) {for (Humano obj : this.getHumano()) { if (obj instanceof Entity) { uuidHumano.add(((Entity) obj).getUuid()); } else { $Humano entity = new $Humano (obj); uuidHumano.add($Humano.find(entity)); if (uuidHumano == null) { throw new TransientObjectException("Batalha", "humano", "Humano"); } } } } }protected java.util.List<Uuid> uuidBatalha = new java.util.ArrayList<>(); @Override public java.util.List<org.obinject.sample.avatar.Batalha> getBatalha() {java.util.List<org.obinject.sample.avatar.Batalha> superBatalha = super.getBatalha(); if ((superBatalha.isEmpty()) && (!uuidBatalha.isEmpty())) {for (Uuid uuid : uuidBatalha) {superBatalha.add($Batalha.entityStructure.find(uuid)); } }return superBatalha; }private void resetUuidBatalha(){ uuidBatalha.clear(); if (this.getBatalha() != null) {for (Batalha obj : this.getBatalha()) { if (obj instanceof Entity) { uuidBatalha.add(((Entity) obj).getUuid()); } else { $Batalha entity = new $Batalha (obj); uuidBatalha.add($Batalha.find(entity)); if (uuidBatalha == null) { throw new TransientObjectException("Batalha", "batalha", "Batalha"); } } } } }@Override public boolean isEqual($Batalha obj) { return (this.getNum() == obj.getNum()) && (this.getDuracao() == obj.getDuracao()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Batalha> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Batalha.find(this); if(uuidInject == null){ resetUuidHumano(); resetUuidBatalha(); $Batalha.entityStructure.add(this); UniqueOneBatalha.uniqueOneBatalhaStructure.add(new UniqueOneBatalha(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Batalha.find(this); if(uuidReject != null){ UniqueOneBatalha.uniqueOneBatalhaStructure.remove(new UniqueOneBatalha(this, this.getUuid())); $Batalha.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Batalha.find(this); $Batalha entityOld = $Batalha.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidHumano(); resetUuidBatalha(); UniqueOneBatalha uniqueOneBatalhaOld = new UniqueOneBatalha(entityOld, entityOld.getUuid()); UniqueOneBatalha uniqueOneBatalhaNew = new UniqueOneBatalha(this, entityOld.getUuid()); if(uniqueOneBatalhaOld.hasSameKey(uniqueOneBatalhaNew)){ $Batalha.uniqueOneBatalhaStructure.remove(uniqueOneBatalhaOld); $Batalha.uniqueOneBatalhaStructure.add(uniqueOneBatalhaNew); } this.uuid = uuidOld; $Batalha.entityStructure.remove(entityOld); $Batalha.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Batalha entity) { UniqueOneBatalha unique = new UniqueOneBatalha (entity, entity.getUuid()); return $Batalha.uniqueOneBatalhaStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Batalha.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNum(pull.pullInteger()); this.setDuracao(pull.pullFloat()); int totalHumano = pull.pullInteger(); for (int i = 0; i < totalHumano; i++) {this.uuidHumano.add(pull.pullUuid()); }int totalBatalha = pull.pullInteger(); for (int i = 0; i < totalBatalha; i++) {this.uuidBatalha.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Batalha.classId); push.pushUuid(uuid); push.pushInteger(this.getNum()); push.pushFloat(this.getDuracao()); push.pushInteger(this.uuidHumano.size()); for (Uuid uuidPush : this.uuidHumano) {push.pushUuid(uuidPush); }push.pushInteger(this.uuidBatalha.size()); for (Uuid uuidPush : this.uuidBatalha) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfFloat + Page.sizeOfEntityCollection(this.uuidHumano) + Page.sizeOfEntityCollection(this.uuidBatalha); } static{ num.getSchemas().add( new Schema<$Batalha, UniqueOneBatalha, Integer>() { @Override public $Batalha newEntity(Integer value) { $Batalha obj = new $Batalha(); obj.setNum(value); return obj; } @Override public UniqueOneBatalha newKey(Integer value) { UniqueOneBatalha obj = new UniqueOneBatalha(); obj.setNum(value); return obj; } @Override public EntityStructure<$Batalha> getEntityStructure() { return $Batalha.entityStructure; } @Override public KeyStructure<UniqueOneBatalha> getKeyStructure() { return UniqueOneBatalha.uniqueOneBatalhaStructure; } } ); } } 