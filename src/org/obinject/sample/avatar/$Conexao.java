package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Conexao extends Conexao implements Entity<$Conexao> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Conexao.classId == null) {$Conexao.classId = Uuid.fromString("CA4B99A6-A399-25C2-1B66-F12091C5376D"); }return $Conexao.classId; } public static final BTreeEntity<$Conexao> entityStructure = new BTreeEntity<$Conexao>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final BTree<UniqueOneConexao> uniqueOneConexaoStructure = new BTree<UniqueOneConexao>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<java.lang.String> tipo = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Conexao)entity).getTipo(); } }; public static final Attribute<org.obinject.sample.avatar.Ser> ser1 = new Attribute<org.obinject.sample.avatar.Ser> (){ @Override public org.obinject.sample.avatar.Ser valueOfAttribute(Entity entity) { return ((Conexao)entity).getSer1(); } }; public static final Attribute<org.obinject.sample.avatar.Ser> ser2 = new Attribute<org.obinject.sample.avatar.Ser> (){ @Override public org.obinject.sample.avatar.Ser valueOfAttribute(Entity entity) { return ((Conexao)entity).getSer2(); } }; public $Conexao(){ this.uuid = Uuid.generator(); } public $Conexao(Conexao obj){ this.setTipo(obj.getTipo()); this.setSer1(obj.getSer1()); this.setSer2(obj.getSer2()); this.uuid = Uuid.generator(); } public $Conexao(Conexao obj, Uuid uuid){ this.setTipo(obj.getTipo()); this.setSer1(obj.getSer1()); this.setSer2(obj.getSer2()); this.uuid = uuid; } public $Conexao($Conexao obj){ this.setTipo(obj.getTipo()); this.setSer1(obj.getSer1()); this.setSer2(obj.getSer2()); this.uuid = obj.getUuid();; } public $Conexao(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidSer1; @Override public Ser getSer1(){ Ser superSer1 = super.getSer1(); if (superSer1 == null && uuidSer1 != null) {superSer1 = $Ser.entityStructure.find(uuidSer1); this.setSer1(superSer1); }return superSer1; }private void resetUuidSer1() { if (this.getSer1() != null) { if (this.getSer1() instanceof Entity) { uuidSer1 = ((Entity) this.getSer1()).getUuid(); } else { $Ser entity = new $Ser (this.getSer1()); uuidSer1 = $Ser.find(entity); if (uuidSer1 == null) { throw new TransientObjectException("Conexao", "ser1", "Ser"); } } } }protected Uuid uuidSer2; @Override public Ser getSer2(){ Ser superSer2 = super.getSer2(); if (superSer2 == null && uuidSer2 != null) {superSer2 = $Ser.entityStructure.find(uuidSer2); this.setSer2(superSer2); }return superSer2; }private void resetUuidSer2() { if (this.getSer2() != null) { if (this.getSer2() instanceof Entity) { uuidSer2 = ((Entity) this.getSer2()).getUuid(); } else { $Ser entity = new $Ser (this.getSer2()); uuidSer2 = $Ser.find(entity); if (uuidSer2 == null) { throw new TransientObjectException("Conexao", "ser2", "Ser"); } } } }@Override public boolean isEqual($Conexao obj) {  return (((this.getTipo() == null) && (obj.getTipo() == null)) || ((this.getTipo() != null) && (obj.getTipo() != null) && (this.getTipo().equals( obj.getTipo())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Conexao> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Conexao.find(this); if(uuidInject == null){ resetUuidSer1(); resetUuidSer2(); $Conexao.entityStructure.add(this); UniqueOneConexao.uniqueOneConexaoStructure.add(new UniqueOneConexao(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Conexao.find(this); if(uuidReject != null){ UniqueOneConexao.uniqueOneConexaoStructure.remove(new UniqueOneConexao(this, this.getUuid())); $Conexao.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Conexao.find(this); $Conexao entityOld = $Conexao.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidSer1(); resetUuidSer2(); UniqueOneConexao uniqueOneConexaoOld = new UniqueOneConexao(entityOld, entityOld.getUuid()); UniqueOneConexao uniqueOneConexaoNew = new UniqueOneConexao(this, entityOld.getUuid()); if(uniqueOneConexaoOld.hasSameKey(uniqueOneConexaoNew)){ $Conexao.uniqueOneConexaoStructure.remove(uniqueOneConexaoOld); $Conexao.uniqueOneConexaoStructure.add(uniqueOneConexaoNew); } this.uuid = uuidOld; $Conexao.entityStructure.remove(entityOld); $Conexao.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Conexao entity) { UniqueOneConexao unique = new UniqueOneConexao (entity, entity.getUuid()); return $Conexao.uniqueOneConexaoStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Conexao.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setTipo(pull.pullString()); int totalSer1 = pull.pullInteger(); if(totalSer1 > 0){this.uuidSer1 = pull.pullUuid(); }int totalSer2 = pull.pullInteger(); if(totalSer2 > 0){this.uuidSer2 = pull.pullUuid(); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Conexao.classId); push.pushUuid(uuid); push.pushString(this.getTipo()); if (this.uuidSer1 != null) { push.pushInteger(1); push.pushUuid(this.uuidSer1); } else {push.pushInteger(0); } if (this.uuidSer2 != null) { push.pushInteger(1); push.pushUuid(this.uuidSer2); } else {push.pushInteger(0); } } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getTipo()) + Page.sizeOfEntity(this.uuidSer1) + Page.sizeOfEntity(this.uuidSer2); } static{ tipo.getSchemas().add( new Schema<$Conexao, UniqueOneConexao, java.lang.String>() { @Override public $Conexao newEntity(java.lang.String value) { $Conexao obj = new $Conexao(); obj.setTipo(value); return obj; } @Override public UniqueOneConexao newKey(java.lang.String value) { UniqueOneConexao obj = new UniqueOneConexao(); obj.setTipo(value); return obj; } @Override public EntityStructure<$Conexao> getEntityStructure() { return $Conexao.entityStructure; } @Override public KeyStructure<UniqueOneConexao> getKeyStructure() { return UniqueOneConexao.uniqueOneConexaoStructure; } } ); } } 