package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Equipamento extends Equipamento implements Entity<$Equipamento> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Equipamento.classId == null) {$Equipamento.classId = Uuid.fromString("BFB0E2C5-F4ED-6EE2-476F-1226A5852F1C"); }return $Equipamento.classId; } public static final BTreeEntity<$Equipamento> entityStructure = new BTreeEntity<$Equipamento>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final BTree<UniqueOneEquipamento> uniqueOneEquipamentoStructure = new BTree<UniqueOneEquipamento>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Equipamento)entity).getNome(); } }; public static final Attribute<java.lang.String> utilidade = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Equipamento)entity).getUtilidade(); } }; public static final Attribute<Integer> consumo = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Equipamento)entity).getConsumo(); } }; public $Equipamento(){ this.uuid = Uuid.generator(); } public $Equipamento(Equipamento obj){ this.setNome(obj.getNome()); this.setUtilidade(obj.getUtilidade()); this.setConsumo(obj.getConsumo()); this.uuid = Uuid.generator(); } public $Equipamento(Equipamento obj, Uuid uuid){ this.setNome(obj.getNome()); this.setUtilidade(obj.getUtilidade()); this.setConsumo(obj.getConsumo()); this.uuid = uuid; } public $Equipamento($Equipamento obj){ this.setNome(obj.getNome()); this.setUtilidade(obj.getUtilidade()); this.setConsumo(obj.getConsumo()); this.uuid = obj.getUuid();; } public $Equipamento(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Equipamento obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (((this.getUtilidade() == null) && (obj.getUtilidade() == null)) || ((this.getUtilidade() != null) && (obj.getUtilidade() != null) && (this.getUtilidade().equals( obj.getUtilidade())))) && (this.getConsumo() == obj.getConsumo()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Equipamento> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Equipamento.find(this); if(uuidInject == null){ $Equipamento.entityStructure.add(this); UniqueOneEquipamento.uniqueOneEquipamentoStructure.add(new UniqueOneEquipamento(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Equipamento.find(this); if(uuidReject != null){ UniqueOneEquipamento.uniqueOneEquipamentoStructure.remove(new UniqueOneEquipamento(this, this.getUuid())); $Equipamento.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Equipamento.find(this); $Equipamento entityOld = $Equipamento.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneEquipamento uniqueOneEquipamentoOld = new UniqueOneEquipamento(entityOld, entityOld.getUuid()); UniqueOneEquipamento uniqueOneEquipamentoNew = new UniqueOneEquipamento(this, entityOld.getUuid()); if(uniqueOneEquipamentoOld.hasSameKey(uniqueOneEquipamentoNew)){ $Equipamento.uniqueOneEquipamentoStructure.remove(uniqueOneEquipamentoOld); $Equipamento.uniqueOneEquipamentoStructure.add(uniqueOneEquipamentoNew); } this.uuid = uuidOld; $Equipamento.entityStructure.remove(entityOld); $Equipamento.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Equipamento entity) { UniqueOneEquipamento unique = new UniqueOneEquipamento (entity, entity.getUuid()); return $Equipamento.uniqueOneEquipamentoStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Equipamento.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNome(pull.pullString()); this.setUtilidade(pull.pullString()); this.setConsumo(pull.pullInteger()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Equipamento.classId); push.pushUuid(uuid); push.pushString(this.getNome()); push.pushString(this.getUtilidade()); push.pushInteger(this.getConsumo()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getNome()) + Page.sizeOfString(this.getUtilidade()) + Page.sizeOfInteger; } static{ nome.getSchemas().add( new Schema<$Equipamento, UniqueOneEquipamento, java.lang.String>() { @Override public $Equipamento newEntity(java.lang.String value) { $Equipamento obj = new $Equipamento(); obj.setNome(value); return obj; } @Override public UniqueOneEquipamento newKey(java.lang.String value) { UniqueOneEquipamento obj = new UniqueOneEquipamento(); obj.setNome(value); return obj; } @Override public EntityStructure<$Equipamento> getEntityStructure() { return $Equipamento.entityStructure; } @Override public KeyStructure<UniqueOneEquipamento> getKeyStructure() { return UniqueOneEquipamento.uniqueOneEquipamentoStructure; } } ); } } 