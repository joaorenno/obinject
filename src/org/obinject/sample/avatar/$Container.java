package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Container extends Container implements Entity<$Container> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Container.classId == null) {$Container.classId = Uuid.fromString("C3268AE1-D0C6-ABBF-7D7E-FF1A7990BC81"); }return $Container.classId; } public static final BTreeEntity<$Container> entityStructure = new BTreeEntity<$Container>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final BTree<UniqueOneContainer> uniqueOneContainerStructure = new BTree<UniqueOneContainer>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Container)entity).getNome(); } }; public static final Attribute<org.obinject.sample.avatar.Laboratorio> cont_lab = new Attribute<org.obinject.sample.avatar.Laboratorio> (){ @Override public org.obinject.sample.avatar.Laboratorio valueOfAttribute(Entity entity) { return ((Container)entity).getCont_lab(); } }; public static final Attribute<org.obinject.sample.avatar.Residencia> cont_res = new Attribute<org.obinject.sample.avatar.Residencia> (){ @Override public org.obinject.sample.avatar.Residencia valueOfAttribute(Entity entity) { return ((Container)entity).getCont_res(); } }; public static final Attribute<org.obinject.sample.avatar.Deposito> cont_dep = new Attribute<org.obinject.sample.avatar.Deposito> (){ @Override public org.obinject.sample.avatar.Deposito valueOfAttribute(Entity entity) { return ((Container)entity).getCont_dep(); } }; public $Container(){ this.uuid = Uuid.generator(); } public $Container(Container obj){ this.setNome(obj.getNome()); this.setCont_lab(obj.getCont_lab()); this.setCont_res(obj.getCont_res()); this.setCont_dep(obj.getCont_dep()); this.uuid = Uuid.generator(); } public $Container(Container obj, Uuid uuid){ this.setNome(obj.getNome()); this.setCont_lab(obj.getCont_lab()); this.setCont_res(obj.getCont_res()); this.setCont_dep(obj.getCont_dep()); this.uuid = uuid; } public $Container($Container obj){ this.setNome(obj.getNome()); this.setCont_lab(obj.getCont_lab()); this.setCont_res(obj.getCont_res()); this.setCont_dep(obj.getCont_dep()); this.uuid = obj.getUuid();; } public $Container(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidCont_lab; @Override public Laboratorio getCont_lab(){ Laboratorio superCont_lab = super.getCont_lab(); if (superCont_lab == null && uuidCont_lab != null) {superCont_lab = $Laboratorio.entityStructure.find(uuidCont_lab); this.setCont_lab(superCont_lab); }return superCont_lab; }private void resetUuidCont_lab() { if (this.getCont_lab() != null) { if (this.getCont_lab() instanceof Entity) { uuidCont_lab = ((Entity) this.getCont_lab()).getUuid(); } else { $Laboratorio entity = new $Laboratorio (this.getCont_lab()); uuidCont_lab = $Laboratorio.find(entity); if (uuidCont_lab == null) { throw new TransientObjectException("Container", "cont_lab", "Laboratorio"); } } } }protected Uuid uuidCont_res; @Override public Residencia getCont_res(){ Residencia superCont_res = super.getCont_res(); if (superCont_res == null && uuidCont_res != null) {superCont_res = $Residencia.entityStructure.find(uuidCont_res); this.setCont_res(superCont_res); }return superCont_res; }private void resetUuidCont_res() { if (this.getCont_res() != null) { if (this.getCont_res() instanceof Entity) { uuidCont_res = ((Entity) this.getCont_res()).getUuid(); } else { $Residencia entity = new $Residencia (this.getCont_res()); uuidCont_res = $Residencia.find(entity); if (uuidCont_res == null) { throw new TransientObjectException("Container", "cont_res", "Residencia"); } } } }protected Uuid uuidCont_dep; @Override public Deposito getCont_dep(){ Deposito superCont_dep = super.getCont_dep(); if (superCont_dep == null && uuidCont_dep != null) {superCont_dep = $Deposito.entityStructure.find(uuidCont_dep); this.setCont_dep(superCont_dep); }return superCont_dep; }private void resetUuidCont_dep() { if (this.getCont_dep() != null) { if (this.getCont_dep() instanceof Entity) { uuidCont_dep = ((Entity) this.getCont_dep()).getUuid(); } else { $Deposito entity = new $Deposito (this.getCont_dep()); uuidCont_dep = $Deposito.find(entity); if (uuidCont_dep == null) { throw new TransientObjectException("Container", "cont_dep", "Deposito"); } } } }@Override public boolean isEqual($Container obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Container> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Container.find(this); if(uuidInject == null){ resetUuidCont_lab(); resetUuidCont_res(); resetUuidCont_dep(); $Container.entityStructure.add(this); UniqueOneContainer.uniqueOneContainerStructure.add(new UniqueOneContainer(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Container.find(this); if(uuidReject != null){ UniqueOneContainer.uniqueOneContainerStructure.remove(new UniqueOneContainer(this, this.getUuid())); $Container.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Container.find(this); $Container entityOld = $Container.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidCont_lab(); resetUuidCont_res(); resetUuidCont_dep(); UniqueOneContainer uniqueOneContainerOld = new UniqueOneContainer(entityOld, entityOld.getUuid()); UniqueOneContainer uniqueOneContainerNew = new UniqueOneContainer(this, entityOld.getUuid()); if(uniqueOneContainerOld.hasSameKey(uniqueOneContainerNew)){ $Container.uniqueOneContainerStructure.remove(uniqueOneContainerOld); $Container.uniqueOneContainerStructure.add(uniqueOneContainerNew); } this.uuid = uuidOld; $Container.entityStructure.remove(entityOld); $Container.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Container entity) { UniqueOneContainer unique = new UniqueOneContainer (entity, entity.getUuid()); return $Container.uniqueOneContainerStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Container.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNome(pull.pullString()); int totalCont_lab = pull.pullInteger(); if(totalCont_lab > 0){this.uuidCont_lab = pull.pullUuid(); }int totalCont_res = pull.pullInteger(); if(totalCont_res > 0){this.uuidCont_res = pull.pullUuid(); }int totalCont_dep = pull.pullInteger(); if(totalCont_dep > 0){this.uuidCont_dep = pull.pullUuid(); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Container.classId); push.pushUuid(uuid); push.pushString(this.getNome()); if (this.uuidCont_lab != null) { push.pushInteger(1); push.pushUuid(this.uuidCont_lab); } else {push.pushInteger(0); } if (this.uuidCont_res != null) { push.pushInteger(1); push.pushUuid(this.uuidCont_res); } else {push.pushInteger(0); } if (this.uuidCont_dep != null) { push.pushInteger(1); push.pushUuid(this.uuidCont_dep); } else {push.pushInteger(0); } } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getNome()) + Page.sizeOfEntity(this.uuidCont_lab) + Page.sizeOfEntity(this.uuidCont_res) + Page.sizeOfEntity(this.uuidCont_dep); } static{ nome.getSchemas().add( new Schema<$Container, UniqueOneContainer, java.lang.String>() { @Override public $Container newEntity(java.lang.String value) { $Container obj = new $Container(); obj.setNome(value); return obj; } @Override public UniqueOneContainer newKey(java.lang.String value) { UniqueOneContainer obj = new UniqueOneContainer(); obj.setNome(value); return obj; } @Override public EntityStructure<$Container> getEntityStructure() { return $Container.entityStructure; } @Override public KeyStructure<UniqueOneContainer> getKeyStructure() { return UniqueOneContainer.uniqueOneContainerStructure; } } ); } } 