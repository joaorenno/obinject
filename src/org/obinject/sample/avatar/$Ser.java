package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Ser extends Ser implements Entity<$Ser> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Ser.classId == null) {$Ser.classId = Uuid.fromString("CF4CBD57-A758-7B8B-1FA9-4E09CE85C7A7"); }return $Ser.classId; } public static final BTreeEntity<$Ser> entityStructure = new BTreeEntity<$Ser>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final BTree<UniqueOneSer> uniqueOneSerStructure = new BTree<UniqueOneSer>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Ser)entity).getNome(); } }; public static final Attribute<java.lang.String> habitat = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Ser)entity).getHabitat(); } }; public static final Attribute<org.obinject.sample.avatar.Conexao> conexao = new Attribute<org.obinject.sample.avatar.Conexao> (){ @Override public org.obinject.sample.avatar.Conexao valueOfAttribute(Entity entity) { return ((Ser)entity).getConexao(); } }; public $Ser(){ this.uuid = Uuid.generator(); } public $Ser(Ser obj){ this.setNome(obj.getNome()); this.setHabitat(obj.getHabitat()); this.setConexao(obj.getConexao()); this.uuid = Uuid.generator(); } public $Ser(Ser obj, Uuid uuid){ this.setNome(obj.getNome()); this.setHabitat(obj.getHabitat()); this.setConexao(obj.getConexao()); this.uuid = uuid; } public $Ser($Ser obj){ this.setNome(obj.getNome()); this.setHabitat(obj.getHabitat()); this.setConexao(obj.getConexao()); this.uuid = obj.getUuid();; } public $Ser(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidConexao; @Override public Conexao getConexao(){ Conexao superConexao = super.getConexao(); if (superConexao == null && uuidConexao != null) {superConexao = $Conexao.entityStructure.find(uuidConexao); this.setConexao(superConexao); }return superConexao; }private void resetUuidConexao() { if (this.getConexao() != null) { if (this.getConexao() instanceof Entity) { uuidConexao = ((Entity) this.getConexao()).getUuid(); } else { $Conexao entity = new $Conexao (this.getConexao()); uuidConexao = $Conexao.find(entity); if (uuidConexao == null) { throw new TransientObjectException("Ser", "conexao", "Conexao"); } } } }@Override public boolean isEqual($Ser obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (((this.getHabitat() == null) && (obj.getHabitat() == null)) || ((this.getHabitat() != null) && (obj.getHabitat() != null) && (this.getHabitat().equals( obj.getHabitat())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Ser> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Ser.find(this); if(uuidInject == null){ resetUuidConexao(); $Ser.entityStructure.add(this); UniqueOneSer.uniqueOneSerStructure.add(new UniqueOneSer(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Ser.find(this); if(uuidReject != null){ UniqueOneSer.uniqueOneSerStructure.remove(new UniqueOneSer(this, this.getUuid())); $Ser.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Ser.find(this); $Ser entityOld = $Ser.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidConexao(); UniqueOneSer uniqueOneSerOld = new UniqueOneSer(entityOld, entityOld.getUuid()); UniqueOneSer uniqueOneSerNew = new UniqueOneSer(this, entityOld.getUuid()); if(uniqueOneSerOld.hasSameKey(uniqueOneSerNew)){ $Ser.uniqueOneSerStructure.remove(uniqueOneSerOld); $Ser.uniqueOneSerStructure.add(uniqueOneSerNew); } this.uuid = uuidOld; $Ser.entityStructure.remove(entityOld); $Ser.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Ser entity) { UniqueOneSer unique = new UniqueOneSer (entity, entity.getUuid()); return $Ser.uniqueOneSerStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Ser.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNome(pull.pullString()); this.setHabitat(pull.pullString()); int totalConexao = pull.pullInteger(); if(totalConexao > 0){this.uuidConexao = pull.pullUuid(); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Ser.classId); push.pushUuid(uuid); push.pushString(this.getNome()); push.pushString(this.getHabitat()); if (this.uuidConexao != null) { push.pushInteger(1); push.pushUuid(this.uuidConexao); } else {push.pushInteger(0); } } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getNome()) + Page.sizeOfString(this.getHabitat()) + Page.sizeOfEntity(this.uuidConexao); } static{ nome.getSchemas().add( new Schema<$Ser, UniqueOneSer, java.lang.String>() { @Override public $Ser newEntity(java.lang.String value) { $Ser obj = new $Ser(); obj.setNome(value); return obj; } @Override public UniqueOneSer newKey(java.lang.String value) { UniqueOneSer obj = new UniqueOneSer(); obj.setNome(value); return obj; } @Override public EntityStructure<$Ser> getEntityStructure() { return $Ser.entityStructure; } @Override public KeyStructure<UniqueOneSer> getKeyStructure() { return UniqueOneSer.uniqueOneSerStructure; } } ); } } 