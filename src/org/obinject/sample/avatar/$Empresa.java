package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Empresa extends Empresa implements Entity<$Empresa> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Empresa.classId == null) {$Empresa.classId = Uuid.fromString("49D83FDC-A35D-36BE-8BDC-E36F5536563D"); }return $Empresa.classId; } public static final BTreeEntity<$Empresa> entityStructure = new BTreeEntity<$Empresa>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final BTree<UniqueOneEmpresa> uniqueOneEmpresaStructure = new BTree<UniqueOneEmpresa>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Empresa)entity).getNome(); } }; public static final Attribute<java.lang.String> registro = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Empresa)entity).getRegistro(); } }; public static final Attribute<java.util.List> colonia = new Attribute<java.util.List> (){ @Override public java.util.List valueOfAttribute(Entity entity) { return ((Empresa)entity).getColonia(); } }; public $Empresa(){ this.uuid = Uuid.generator(); } public $Empresa(Empresa obj){ this.setNome(obj.getNome()); this.setRegistro(obj.getRegistro()); this.setColonia(obj.getColonia()); this.uuid = Uuid.generator(); } public $Empresa(Empresa obj, Uuid uuid){ this.setNome(obj.getNome()); this.setRegistro(obj.getRegistro()); this.setColonia(obj.getColonia()); this.uuid = uuid; } public $Empresa($Empresa obj){ this.setNome(obj.getNome()); this.setRegistro(obj.getRegistro()); this.setColonia(obj.getColonia()); this.uuid = obj.getUuid();; } public $Empresa(Uuid uuid){ this.uuid = uuid; } protected java.util.List<Uuid> uuidColonia = new java.util.ArrayList<>(); @Override public java.util.List<org.obinject.sample.avatar.Colonia> getColonia() {java.util.List<org.obinject.sample.avatar.Colonia> superColonia = super.getColonia(); if ((superColonia.isEmpty()) && (!uuidColonia.isEmpty())) {for (Uuid uuid : uuidColonia) {superColonia.add($Colonia.entityStructure.find(uuid)); } }return superColonia; }private void resetUuidColonia(){ uuidColonia.clear(); if (this.getColonia() != null) {for (Colonia obj : this.getColonia()) { if (obj instanceof Entity) { uuidColonia.add(((Entity) obj).getUuid()); } else { $Colonia entity = new $Colonia (obj); uuidColonia.add($Colonia.find(entity)); if (uuidColonia == null) { throw new TransientObjectException("Empresa", "colonia", "Colonia"); } } } } }@Override public boolean isEqual($Empresa obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (((this.getRegistro() == null) && (obj.getRegistro() == null)) || ((this.getRegistro() != null) && (obj.getRegistro() != null) && (this.getRegistro().equals( obj.getRegistro())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Empresa> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Empresa.find(this); if(uuidInject == null){ resetUuidColonia(); $Empresa.entityStructure.add(this); UniqueOneEmpresa.uniqueOneEmpresaStructure.add(new UniqueOneEmpresa(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Empresa.find(this); if(uuidReject != null){ UniqueOneEmpresa.uniqueOneEmpresaStructure.remove(new UniqueOneEmpresa(this, this.getUuid())); $Empresa.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Empresa.find(this); $Empresa entityOld = $Empresa.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidColonia(); UniqueOneEmpresa uniqueOneEmpresaOld = new UniqueOneEmpresa(entityOld, entityOld.getUuid()); UniqueOneEmpresa uniqueOneEmpresaNew = new UniqueOneEmpresa(this, entityOld.getUuid()); if(uniqueOneEmpresaOld.hasSameKey(uniqueOneEmpresaNew)){ $Empresa.uniqueOneEmpresaStructure.remove(uniqueOneEmpresaOld); $Empresa.uniqueOneEmpresaStructure.add(uniqueOneEmpresaNew); } this.uuid = uuidOld; $Empresa.entityStructure.remove(entityOld); $Empresa.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Empresa entity) { UniqueOneEmpresa unique = new UniqueOneEmpresa (entity, entity.getUuid()); return $Empresa.uniqueOneEmpresaStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Empresa.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNome(pull.pullString()); this.setRegistro(pull.pullString()); int totalColonia = pull.pullInteger(); for (int i = 0; i < totalColonia; i++) {this.uuidColonia.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Empresa.classId); push.pushUuid(uuid); push.pushString(this.getNome()); push.pushString(this.getRegistro()); push.pushInteger(this.uuidColonia.size()); for (Uuid uuidPush : this.uuidColonia) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getNome()) + Page.sizeOfString(this.getRegistro()) + Page.sizeOfEntityCollection(this.uuidColonia); } static{ registro.getSchemas().add( new Schema<$Empresa, UniqueOneEmpresa, java.lang.String>() { @Override public $Empresa newEntity(java.lang.String value) { $Empresa obj = new $Empresa(); obj.setRegistro(value); return obj; } @Override public UniqueOneEmpresa newKey(java.lang.String value) { UniqueOneEmpresa obj = new UniqueOneEmpresa(); obj.setRegistro(value); return obj; } @Override public EntityStructure<$Empresa> getEntityStructure() { return $Empresa.entityStructure; } @Override public KeyStructure<UniqueOneEmpresa> getKeyStructure() { return UniqueOneEmpresa.uniqueOneEmpresaStructure; } } ); } } 