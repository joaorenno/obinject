package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Navi extends Navi implements Entity<$Navi> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Navi.classId == null) {$Navi.classId = Uuid.fromString("E5CF723F-3F69-583E-4100-D7FB7557A26C"); }return $Navi.classId; } public static final BTreeEntity<$Navi> entityStructure = new BTreeEntity<$Navi>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Navi)entity).getNome(); } }; public static final Attribute<java.lang.String> habitat = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Navi)entity).getHabitat(); } }; public static final Attribute<org.obinject.sample.avatar.Conexao> conexao = new Attribute<org.obinject.sample.avatar.Conexao> (){ @Override public org.obinject.sample.avatar.Conexao valueOfAttribute(Entity entity) { return ((Navi)entity).getConexao(); } }; public static final Attribute<java.lang.String> funcao = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Navi)entity).getFuncao(); } }; public static final Attribute<java.lang.String> cla = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Navi)entity).getCla(); } }; public static final Attribute<java.lang.String> bioluminescencia = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Navi)entity).getBioluminescencia(); } }; public static final Attribute<Float> altura = new Attribute<Float> (){ @Override public Float valueOfAttribute(Entity entity) { return ((Navi)entity).getAltura(); } }; public static final Attribute<Float> cauda = new Attribute<Float> (){ @Override public Float valueOfAttribute(Entity entity) { return ((Navi)entity).getCauda(); } }; public static final Attribute<java.util.List> arvores = new Attribute<java.util.List> (){ @Override public java.util.List valueOfAttribute(Entity entity) { return ((Navi)entity).getArvores(); } }; public $Navi(){ this.uuid = Uuid.generator(); } public $Navi(Navi obj){ this.setNome(obj.getNome()); this.setHabitat(obj.getHabitat()); this.setConexao(obj.getConexao()); this.setFuncao(obj.getFuncao()); this.setCla(obj.getCla()); this.setBioluminescencia(obj.getBioluminescencia()); this.setAltura(obj.getAltura()); this.setCauda(obj.getCauda()); this.setArvores(obj.getArvores()); this.uuid = Uuid.generator(); } public $Navi(Navi obj, Uuid uuid){ this.setNome(obj.getNome()); this.setHabitat(obj.getHabitat()); this.setConexao(obj.getConexao()); this.setFuncao(obj.getFuncao()); this.setCla(obj.getCla()); this.setBioluminescencia(obj.getBioluminescencia()); this.setAltura(obj.getAltura()); this.setCauda(obj.getCauda()); this.setArvores(obj.getArvores()); this.uuid = uuid; } public $Navi($Navi obj){ this.setNome(obj.getNome()); this.setHabitat(obj.getHabitat()); this.setConexao(obj.getConexao()); this.setFuncao(obj.getFuncao()); this.setCla(obj.getCla()); this.setBioluminescencia(obj.getBioluminescencia()); this.setAltura(obj.getAltura()); this.setCauda(obj.getCauda()); this.setArvores(obj.getArvores()); this.uuid = obj.getUuid();; } public $Navi(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidConexao; @Override public Conexao getConexao(){ Conexao superConexao = super.getConexao(); if (superConexao == null && uuidConexao != null) {superConexao = $Conexao.entityStructure.find(uuidConexao); this.setConexao(superConexao); }return superConexao; }private void resetUuidConexao() { if (this.getConexao() != null) { if (this.getConexao() instanceof Entity) { uuidConexao = ((Entity) this.getConexao()).getUuid(); } else { $Conexao entity = new $Conexao (this.getConexao()); uuidConexao = $Conexao.find(entity); if (uuidConexao == null) { throw new TransientObjectException("Navi", "conexao", "Conexao"); } } } }protected java.util.List<Uuid> uuidArvores = new java.util.ArrayList<>(); @Override public java.util.List<org.obinject.sample.avatar.Arvore> getArvores() {java.util.List<org.obinject.sample.avatar.Arvore> superArvores = super.getArvores(); if ((superArvores.isEmpty()) && (!uuidArvores.isEmpty())) {for (Uuid uuid : uuidArvores) {superArvores.add($Arvore.entityStructure.find(uuid)); } }return superArvores; }private void resetUuidArvores(){ uuidArvores.clear(); if (this.getArvores() != null) {for (Arvore obj : this.getArvores()) { if (obj instanceof Entity) { uuidArvores.add(((Entity) obj).getUuid()); } else { $Arvore entity = new $Arvore (obj); uuidArvores.add($Arvore.find(entity)); if (uuidArvores == null) { throw new TransientObjectException("Navi", "arvores", "Arvore"); } } } } }@Override public boolean isEqual($Navi obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (((this.getHabitat() == null) && (obj.getHabitat() == null)) || ((this.getHabitat() != null) && (obj.getHabitat() != null) && (this.getHabitat().equals( obj.getHabitat())))) && (((this.getFuncao() == null) && (obj.getFuncao() == null)) || ((this.getFuncao() != null) && (obj.getFuncao() != null) && (this.getFuncao().equals( obj.getFuncao())))) && (((this.getCla() == null) && (obj.getCla() == null)) || ((this.getCla() != null) && (obj.getCla() != null) && (this.getCla().equals( obj.getCla())))) && (((this.getBioluminescencia() == null) && (obj.getBioluminescencia() == null)) || ((this.getBioluminescencia() != null) && (obj.getBioluminescencia() != null) && (this.getBioluminescencia().equals( obj.getBioluminescencia())))) && (this.getAltura() == obj.getAltura()) && (this.getCauda() == obj.getCauda()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Navi> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Navi.find(this); if(uuidInject == null){ resetUuidConexao(); resetUuidArvores(); $Navi.entityStructure.add(this); UniqueOneSer.uniqueOneSerStructure.add(new UniqueOneSer(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Navi.find(this); if(uuidReject != null){ UniqueOneSer.uniqueOneSerStructure.remove(new UniqueOneSer(this, this.getUuid())); $Navi.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Navi.find(this); $Navi entityOld = $Navi.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidConexao(); resetUuidArvores(); UniqueOneSer uniqueOneSerOld = new UniqueOneSer(entityOld, entityOld.getUuid()); UniqueOneSer uniqueOneSerNew = new UniqueOneSer(this, entityOld.getUuid()); if(uniqueOneSerOld.hasSameKey(uniqueOneSerNew)){ $Ser.uniqueOneSerStructure.remove(uniqueOneSerOld); $Ser.uniqueOneSerStructure.add(uniqueOneSerNew); } this.uuid = uuidOld; $Navi.entityStructure.remove(entityOld); $Navi.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Navi entity) { UniqueOneSer unique = new UniqueOneSer (entity, entity.getUuid()); return $Ser.uniqueOneSerStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Navi.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNome(pull.pullString()); this.setHabitat(pull.pullString()); int totalConexao = pull.pullInteger(); if(totalConexao > 0){this.uuidConexao = pull.pullUuid(); }this.setFuncao(pull.pullString()); this.setCla(pull.pullString()); this.setBioluminescencia(pull.pullString()); this.setAltura(pull.pullFloat()); this.setCauda(pull.pullFloat()); int totalArvores = pull.pullInteger(); for (int i = 0; i < totalArvores; i++) {this.uuidArvores.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Navi.classId); push.pushUuid(uuid); push.pushString(this.getNome()); push.pushString(this.getHabitat()); if (this.uuidConexao != null) { push.pushInteger(1); push.pushUuid(this.uuidConexao); } else {push.pushInteger(0); } push.pushString(this.getFuncao()); push.pushString(this.getCla()); push.pushString(this.getBioluminescencia()); push.pushFloat(this.getAltura()); push.pushFloat(this.getCauda()); push.pushInteger(this.uuidArvores.size()); for (Uuid uuidPush : this.uuidArvores) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getNome()) + Page.sizeOfString(this.getHabitat()) + Page.sizeOfEntity(this.uuidConexao) + Page.sizeOfString(this.getFuncao()) + Page.sizeOfString(this.getCla()) + Page.sizeOfString(this.getBioluminescencia()) + Page.sizeOfFloat + Page.sizeOfFloat + Page.sizeOfEntityCollection(this.uuidArvores); } static{ nome.getSchemas().add( new Schema<$Navi, UniqueOneSer, java.lang.String>() { @Override public $Navi newEntity(java.lang.String value) { $Navi obj = new $Navi(); obj.setNome(value); return obj; } @Override public UniqueOneSer newKey(java.lang.String value) { UniqueOneSer obj = new UniqueOneSer(); obj.setNome(value); return obj; } @Override public EntityStructure<$Navi> getEntityStructure() { return $Navi.entityStructure; } @Override public KeyStructure<UniqueOneSer> getKeyStructure() { return UniqueOneSer.uniqueOneSerStructure; } } ); } } 