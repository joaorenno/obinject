package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneSer extends $Ser implements Sort<UniqueOneSer>, Comparable<UniqueOneSer> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneSer.classId == null) {UniqueOneSer.classId = Uuid.fromString("337AC11E-F83F-AE75-B5C7-F0D8DC2E0802"); }return UniqueOneSer.classId; } public UniqueOneSer(){} public UniqueOneSer($Ser obj){ super(obj); } public UniqueOneSer(Ser obj, Uuid uuid){ super(obj, uuid); } public UniqueOneSer(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneSer obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))); } @Override public int compareTo(UniqueOneSer obj) { if (((this.getNome() == null) || (this.getNome() != null) && (obj.getNome() != null) && (this.getNome().compareTo( obj.getNome()) < 0))) { return -1; } else if (((this.getNome() == null) || (this.getNome() != null) && (obj.getNome() != null) && (this.getNome().compareTo( obj.getNome()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneSer> getKeyStructure() { return uniqueOneSerStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setNome(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getNome()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getNome()); } } 