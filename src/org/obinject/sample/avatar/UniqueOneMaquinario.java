package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneMaquinario extends $Maquinario implements Sort<UniqueOneMaquinario>, Comparable<UniqueOneMaquinario> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneMaquinario.classId == null) {UniqueOneMaquinario.classId = Uuid.fromString("6F109F44-6EB3-3F2E-A3D1-DC6E5DB38A55"); }return UniqueOneMaquinario.classId; } public UniqueOneMaquinario(){} public UniqueOneMaquinario($Maquinario obj){ super(obj); } public UniqueOneMaquinario(Maquinario obj, Uuid uuid){ super(obj, uuid); } public UniqueOneMaquinario(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneMaquinario obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))); } @Override public int compareTo(UniqueOneMaquinario obj) { if (((this.getNome() == null) || (this.getNome() != null) && (obj.getNome() != null) && (this.getNome().compareTo( obj.getNome()) < 0))) { return -1; } else if (((this.getNome() == null) || (this.getNome() != null) && (obj.getNome() != null) && (this.getNome().compareTo( obj.getNome()) == 0))) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneMaquinario> getKeyStructure() { return uniqueOneMaquinarioStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setNome(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getNome()); } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getNome()); } } 