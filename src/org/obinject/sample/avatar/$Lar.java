package org.obinject.sample.avatar; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; public class $Lar extends Lar implements Entity<$Lar> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Lar.classId == null) {$Lar.classId = Uuid.fromString("EBC3378A-52C6-90FE-0E9D-1BE19176D4C5"); }return $Lar.classId; } public static final BTreeEntity<$Lar> entityStructure = new BTreeEntity<$Lar>(new File("build/classes/org/obinject/sample/avatar/avatar.dbo", 4096)){}; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Lar)entity).getNome(); } }; public static final Attribute<Integer> idade = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Lar)entity).getIdade(); } }; public static final Attribute<Float> altura = new Attribute<Float> (){ @Override public Float valueOfAttribute(Entity entity) { return ((Lar)entity).getAltura(); } }; public $Lar(){ this.uuid = Uuid.generator(); } public $Lar(Lar obj){ this.setNome(obj.getNome()); this.setIdade(obj.getIdade()); this.setAltura(obj.getAltura()); this.uuid = Uuid.generator(); } public $Lar(Lar obj, Uuid uuid){ this.setNome(obj.getNome()); this.setIdade(obj.getIdade()); this.setAltura(obj.getAltura()); this.uuid = uuid; } public $Lar($Lar obj){ this.setNome(obj.getNome()); this.setIdade(obj.getIdade()); this.setAltura(obj.getAltura()); this.uuid = obj.getUuid();; } public $Lar(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Lar obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (this.getIdade() == obj.getIdade()) && (this.getAltura() == obj.getAltura()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Lar> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Lar.find(this); if(uuidInject == null){ $Lar.entityStructure.add(this); UniqueOneArvore.uniqueOneArvoreStructure.add(new UniqueOneArvore(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Lar.find(this); if(uuidReject != null){ UniqueOneArvore.uniqueOneArvoreStructure.remove(new UniqueOneArvore(this, this.getUuid())); $Lar.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Lar.find(this); $Lar entityOld = $Lar.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneArvore uniqueOneArvoreOld = new UniqueOneArvore(entityOld, entityOld.getUuid()); UniqueOneArvore uniqueOneArvoreNew = new UniqueOneArvore(this, entityOld.getUuid()); if(uniqueOneArvoreOld.hasSameKey(uniqueOneArvoreNew)){ $Arvore.uniqueOneArvoreStructure.remove(uniqueOneArvoreOld); $Arvore.uniqueOneArvoreStructure.add(uniqueOneArvoreNew); } this.uuid = uuidOld; $Lar.entityStructure.remove(entityOld); $Lar.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Lar entity) { UniqueOneArvore unique = new UniqueOneArvore (entity, entity.getUuid()); return $Arvore.uniqueOneArvoreStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Lar.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNome(pull.pullString()); this.setIdade(pull.pullInteger()); this.setAltura(pull.pullFloat()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Lar.classId); push.pushUuid(uuid); push.pushString(this.getNome()); push.pushInteger(this.getIdade()); push.pushFloat(this.getAltura()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getNome()) + Page.sizeOfInteger + Page.sizeOfFloat; } static{ nome.getSchemas().add( new Schema<$Lar, UniqueOneArvore, java.lang.String>() { @Override public $Lar newEntity(java.lang.String value) { $Lar obj = new $Lar(); obj.setNome(value); return obj; } @Override public UniqueOneArvore newKey(java.lang.String value) { UniqueOneArvore obj = new UniqueOneArvore(); obj.setNome(value); return obj; } @Override public EntityStructure<$Lar> getEntityStructure() { return $Lar.entityStructure; } @Override public KeyStructure<UniqueOneArvore> getKeyStructure() { return UniqueOneArvore.uniqueOneArvoreStructure; } } ); } } 