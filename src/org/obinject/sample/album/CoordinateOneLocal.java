package org.obinject.sample.album; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Point; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class CoordinateOneLocal extends $Local implements Point<CoordinateOneLocal> { private double preservedDistance; private static Uuid classId; public static Uuid getClassId(){ if (CoordinateOneLocal.classId == null) {CoordinateOneLocal.classId = Uuid.fromString("CD34BC69-CCB8-5D7B-A19D-076951BE1906"); }return CoordinateOneLocal.classId; } public CoordinateOneLocal(){} public CoordinateOneLocal($Local obj){ super(obj); } public CoordinateOneLocal(Local obj, Uuid uuid){ super(obj, uuid); } public CoordinateOneLocal(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(CoordinateOneLocal obj) { int i=0; while(( i < this.numberOfDimensions()) && (this.getOrigin(i) == obj.getOrigin(i))){ i++; }return i == this.numberOfDimensions(); }@Override public double getOrigin(int axis){ switch(axis){ case 0: return getLatitudePadrao(); case 1: return getLongitudePadrao(); default: return 0; } } @Override public void setOrigin(int axis, double value){ switch(axis){ case 0: setLatitudePadrao(value); break; case 1: setLongitudePadrao(value); break; } } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public int numberOfDimensions(){ return 2;} @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public double distanceTo(CoordinateOneLocal obj){ return DistanceUtil.sphericalDistanceDegree(this, obj, 6378.0); } @Override public KeyStructure<CoordinateOneLocal> getKeyStructure() { return coordinateOneLocalStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ this.setOrigin(i, pull.pullDouble()); } return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ push.pushDouble(this.getOrigin(i));} } @Override public int sizeOfKey() { return Page.sizeOfDouble * this.numberOfDimensions();} } 