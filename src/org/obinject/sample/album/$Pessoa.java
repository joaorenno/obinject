package org.obinject.sample.album; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; public class $Pessoa extends Pessoa implements Entity<$Pessoa> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Pessoa.classId == null) {$Pessoa.classId = Uuid.fromString("73517CBF-87C4-EE76-5F46-57FD590FA00C"); }return $Pessoa.classId; } public static final BTreeEntity<$Pessoa> entityStructure = new BTreeEntity<$Pessoa>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final BTree<SortOnePessoa> sortOnePessoaStructure = new BTree<SortOnePessoa>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final BTree<UniqueOnePessoa> uniqueOnePessoaStructure = new BTree<UniqueOnePessoa>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final MTree<EditionTwoPessoa> editionTwoPessoaStructure = new MTree<EditionTwoPessoa>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final Attribute<java.lang.String> email = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Pessoa)entity).getEmail(); } }; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Pessoa)entity).getNome(); } }; public static final Attribute<java.util.ArrayList> albuns = new Attribute<java.util.ArrayList> (){ @Override public java.util.ArrayList valueOfAttribute(Entity entity) { return ((Pessoa)entity).getAlbuns(); } }; public $Pessoa(){ this.uuid = Uuid.generator(); } public $Pessoa(Pessoa obj){ this.setEmail(obj.getEmail()); this.setNome(obj.getNome()); this.setAlbuns(obj.getAlbuns()); this.uuid = Uuid.generator(); } public $Pessoa(Pessoa obj, Uuid uuid){ this.setEmail(obj.getEmail()); this.setNome(obj.getNome()); this.setAlbuns(obj.getAlbuns()); this.uuid = uuid; } public $Pessoa($Pessoa obj){ this.setEmail(obj.getEmail()); this.setNome(obj.getNome()); this.setAlbuns(obj.getAlbuns()); this.uuid = obj.getUuid();; } public $Pessoa(Uuid uuid){ this.uuid = uuid; } protected java.util.List<Uuid> uuidAlbuns = new java.util.ArrayList<>(); @Override public java.util.ArrayList<org.obinject.sample.album.Album> getAlbuns() {java.util.ArrayList<org.obinject.sample.album.Album> superAlbuns = super.getAlbuns(); if ((superAlbuns.isEmpty()) && (!uuidAlbuns.isEmpty())) {for (Uuid uuid : uuidAlbuns) {superAlbuns.add($Album.entityStructure.find(uuid)); } }return superAlbuns; }private void resetUuidAlbuns(){ uuidAlbuns.clear(); if (this.getAlbuns() != null) {for (Album obj : this.getAlbuns()) { if (obj instanceof Entity) { uuidAlbuns.add(((Entity) obj).getUuid()); } else { $Album entity = new $Album (obj); uuidAlbuns.add($Album.find(entity)); if (uuidAlbuns == null) { throw new TransientObjectException("Pessoa", "albuns", "Album"); } } } } }@Override public boolean isEqual($Pessoa obj) {  return (((this.getEmail() == null) && (obj.getEmail() == null)) || ((this.getEmail() != null) && (obj.getEmail() != null) && (this.getEmail().equals( obj.getEmail())))) && (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Pessoa> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Pessoa.find(this); if(uuidInject == null){ resetUuidAlbuns(); $Pessoa.entityStructure.add(this); SortOnePessoa.sortOnePessoaStructure.add(new SortOnePessoa(this, this.getUuid())); UniqueOnePessoa.uniqueOnePessoaStructure.add(new UniqueOnePessoa(this, this.getUuid())); EditionTwoPessoa.editionTwoPessoaStructure.add(new EditionTwoPessoa(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Pessoa.find(this); if(uuidReject != null){ SortOnePessoa.sortOnePessoaStructure.remove(new SortOnePessoa(this, this.getUuid())); UniqueOnePessoa.uniqueOnePessoaStructure.remove(new UniqueOnePessoa(this, this.getUuid())); EditionTwoPessoa.editionTwoPessoaStructure.remove(new EditionTwoPessoa(this, this.getUuid())); $Pessoa.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Pessoa.find(this); $Pessoa entityOld = $Pessoa.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidAlbuns(); SortOnePessoa sortOnePessoaOld = new SortOnePessoa(entityOld, entityOld.getUuid()); SortOnePessoa sortOnePessoaNew = new SortOnePessoa(this, entityOld.getUuid()); if(sortOnePessoaOld.hasSameKey(sortOnePessoaNew)){ $Pessoa.sortOnePessoaStructure.remove(sortOnePessoaOld); $Pessoa.sortOnePessoaStructure.add(sortOnePessoaNew); } UniqueOnePessoa uniqueOnePessoaOld = new UniqueOnePessoa(entityOld, entityOld.getUuid()); UniqueOnePessoa uniqueOnePessoaNew = new UniqueOnePessoa(this, entityOld.getUuid()); if(uniqueOnePessoaOld.hasSameKey(uniqueOnePessoaNew)){ $Pessoa.uniqueOnePessoaStructure.remove(uniqueOnePessoaOld); $Pessoa.uniqueOnePessoaStructure.add(uniqueOnePessoaNew); } EditionTwoPessoa editionTwoPessoaOld = new EditionTwoPessoa(entityOld, entityOld.getUuid()); EditionTwoPessoa editionTwoPessoaNew = new EditionTwoPessoa(this, entityOld.getUuid()); if(editionTwoPessoaOld.hasSameKey(editionTwoPessoaNew)){ $Pessoa.editionTwoPessoaStructure.remove(editionTwoPessoaOld); $Pessoa.editionTwoPessoaStructure.add(editionTwoPessoaNew); } this.uuid = uuidOld; $Pessoa.entityStructure.remove(entityOld); $Pessoa.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Pessoa entity) { UniqueOnePessoa unique = new UniqueOnePessoa (entity, entity.getUuid()); return $Pessoa.uniqueOnePessoaStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Pessoa.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setEmail(pull.pullString()); this.setNome(pull.pullString()); int totalAlbuns = pull.pullInteger(); for (int i = 0; i < totalAlbuns; i++) {this.uuidAlbuns.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Pessoa.classId); push.pushUuid(uuid); push.pushString(this.getEmail()); push.pushString(this.getNome()); push.pushInteger(this.uuidAlbuns.size()); for (Uuid uuidPush : this.uuidAlbuns) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getEmail()) + Page.sizeOfString(this.getNome()) + Page.sizeOfEntityCollection(this.uuidAlbuns); } static{ email.getSchemas().add( new Schema<$Pessoa, UniqueOnePessoa, java.lang.String>() { @Override public $Pessoa newEntity(java.lang.String value) { $Pessoa obj = new $Pessoa(); obj.setEmail(value); return obj; } @Override public UniqueOnePessoa newKey(java.lang.String value) { UniqueOnePessoa obj = new UniqueOnePessoa(); obj.setEmail(value); return obj; } @Override public EntityStructure<$Pessoa> getEntityStructure() { return $Pessoa.entityStructure; } @Override public KeyStructure<UniqueOnePessoa> getKeyStructure() { return UniqueOnePessoa.uniqueOnePessoaStructure; } } ); email.getSchemas().add( new Schema<$Pessoa, SortOnePessoa, java.lang.String>() { @Override public $Pessoa newEntity(java.lang.String value) { $Pessoa obj = new $Pessoa(); obj.setEmail(value); return obj; } @Override public SortOnePessoa newKey(java.lang.String value) { SortOnePessoa obj = new SortOnePessoa(); obj.setEmail(value); return obj; } @Override public EntityStructure<$Pessoa> getEntityStructure() { return $Pessoa.entityStructure; } @Override public KeyStructure<SortOnePessoa> getKeyStructure() { return SortOnePessoa.sortOnePessoaStructure; } } ); nome.getSchemas().add( new Schema<$Pessoa, EditionTwoPessoa, java.lang.String>() { @Override public $Pessoa newEntity(java.lang.String value) { $Pessoa obj = new $Pessoa(); obj.setNome(value); return obj; } @Override public EditionTwoPessoa newKey(java.lang.String value) { EditionTwoPessoa obj = new EditionTwoPessoa(); obj.setNome(value); return obj; } @Override public EntityStructure<$Pessoa> getEntityStructure() { return $Pessoa.entityStructure; } @Override public KeyStructure<EditionTwoPessoa> getKeyStructure() { return EditionTwoPessoa.editionTwoPessoaStructure; } } ); } } 