package org.obinject.sample.album; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneAlbum extends $Album implements Sort<UniqueOneAlbum>, Comparable<UniqueOneAlbum> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneAlbum.classId == null) {UniqueOneAlbum.classId = Uuid.fromString("89436875-260A-2009-5244-4AFA27BC2F1A"); }return UniqueOneAlbum.classId; } public UniqueOneAlbum(){} public UniqueOneAlbum($Album obj){ super(obj); } public UniqueOneAlbum(Album obj, Uuid uuid){ super(obj, uuid); } public UniqueOneAlbum(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneAlbum obj) { return (this.getNumero() == obj.getNumero()); } @Override public int compareTo(UniqueOneAlbum obj) { if ((this.getNumero() < obj.getNumero())) { return -1; } else if ((this.getNumero() == obj.getNumero())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneAlbum> getKeyStructure() { return uniqueOneAlbumStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setNumero(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getNumero()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 