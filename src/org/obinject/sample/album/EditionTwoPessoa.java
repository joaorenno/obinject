package org.obinject.sample.album; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Edition; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class EditionTwoPessoa extends $Pessoa implements Edition<EditionTwoPessoa> { private double preservedDistance; private static Uuid classId; public static Uuid getClassId(){ if (EditionTwoPessoa.classId == null) {EditionTwoPessoa.classId = Uuid.fromString("AB878462-9421-9228-EBAC-0A4CCEEB7C47"); }return EditionTwoPessoa.classId; } public EditionTwoPessoa(){} public EditionTwoPessoa($Pessoa obj){ super(obj); } public EditionTwoPessoa(Pessoa obj, Uuid uuid){ super(obj, uuid); } public EditionTwoPessoa(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(EditionTwoPessoa obj) {  return (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))); } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public String getString(){ return "" + getNome();} @Override public double distanceTo(EditionTwoPessoa obj){ return DistanceUtil.levenshtein(this.getString(), obj.getString()); } @Override public KeyStructure<EditionTwoPessoa> getKeyStructure() { return editionTwoPessoaStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setNome(pull.pullString()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushString(this.getNome()); } @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public int sizeOfKey() { return  + Page.sizeOfString(this.getNome()); } } 