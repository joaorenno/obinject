package org.obinject.sample.album; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; public class $Album extends Album implements Entity<$Album> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Album.classId == null) {$Album.classId = Uuid.fromString("0AD1136D-A804-A135-FC27-D68587CED1F4"); }return $Album.classId; } public static final BTreeEntity<$Album> entityStructure = new BTreeEntity<$Album>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final BTree<UniqueOneAlbum> uniqueOneAlbumStructure = new BTree<UniqueOneAlbum>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final MTree<EditionOneAlbum> editionOneAlbumStructure = new MTree<EditionOneAlbum>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final Attribute<Integer> numero = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Album)entity).getNumero(); } }; public static final Attribute<java.lang.String> nome = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Album)entity).getNome(); } }; public static final Attribute<Boolean> compartilhar = new Attribute<Boolean> (){ @Override public Boolean valueOfAttribute(Entity entity) { return ((Album)entity).isCompartilhar(); } }; public static final Attribute<java.util.ArrayList> fotos = new Attribute<java.util.ArrayList> (){ @Override public java.util.ArrayList valueOfAttribute(Entity entity) { return ((Album)entity).getFotos(); } }; public $Album(){ this.uuid = Uuid.generator(); } public $Album(Album obj){ this.setNumero(obj.getNumero()); this.setNome(obj.getNome()); this.setCompartilhar(obj.isCompartilhar()); this.setFotos(obj.getFotos()); this.uuid = Uuid.generator(); } public $Album(Album obj, Uuid uuid){ this.setNumero(obj.getNumero()); this.setNome(obj.getNome()); this.setCompartilhar(obj.isCompartilhar()); this.setFotos(obj.getFotos()); this.uuid = uuid; } public $Album($Album obj){ this.setNumero(obj.getNumero()); this.setNome(obj.getNome()); this.setCompartilhar(obj.isCompartilhar()); this.setFotos(obj.getFotos()); this.uuid = obj.getUuid();; } public $Album(Uuid uuid){ this.uuid = uuid; } protected java.util.List<Uuid> uuidFotos = new java.util.ArrayList<>(); @Override public java.util.ArrayList<org.obinject.sample.album.Foto> getFotos() {java.util.ArrayList<org.obinject.sample.album.Foto> superFotos = super.getFotos(); if ((superFotos.isEmpty()) && (!uuidFotos.isEmpty())) {for (Uuid uuid : uuidFotos) {superFotos.add($Foto.entityStructure.find(uuid)); } }return superFotos; }private void resetUuidFotos(){ uuidFotos.clear(); if (this.getFotos() != null) {for (Foto obj : this.getFotos()) { if (obj instanceof Entity) { uuidFotos.add(((Entity) obj).getUuid()); } else { $Foto entity = new $Foto (obj); uuidFotos.add($Foto.find(entity)); if (uuidFotos == null) { throw new TransientObjectException("Album", "fotos", "Foto"); } } } } }@Override public boolean isEqual($Album obj) { return (this.getNumero() == obj.getNumero()) && (((this.getNome() == null) && (obj.getNome() == null)) || ((this.getNome() != null) && (obj.getNome() != null) && (this.getNome().equals( obj.getNome())))) && (this.isCompartilhar() == obj.isCompartilhar()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Album> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Album.find(this); if(uuidInject == null){ resetUuidFotos(); $Album.entityStructure.add(this); UniqueOneAlbum.uniqueOneAlbumStructure.add(new UniqueOneAlbum(this, this.getUuid())); EditionOneAlbum.editionOneAlbumStructure.add(new EditionOneAlbum(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Album.find(this); if(uuidReject != null){ UniqueOneAlbum.uniqueOneAlbumStructure.remove(new UniqueOneAlbum(this, this.getUuid())); EditionOneAlbum.editionOneAlbumStructure.remove(new EditionOneAlbum(this, this.getUuid())); $Album.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Album.find(this); $Album entityOld = $Album.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidFotos(); UniqueOneAlbum uniqueOneAlbumOld = new UniqueOneAlbum(entityOld, entityOld.getUuid()); UniqueOneAlbum uniqueOneAlbumNew = new UniqueOneAlbum(this, entityOld.getUuid()); if(uniqueOneAlbumOld.hasSameKey(uniqueOneAlbumNew)){ $Album.uniqueOneAlbumStructure.remove(uniqueOneAlbumOld); $Album.uniqueOneAlbumStructure.add(uniqueOneAlbumNew); } EditionOneAlbum editionOneAlbumOld = new EditionOneAlbum(entityOld, entityOld.getUuid()); EditionOneAlbum editionOneAlbumNew = new EditionOneAlbum(this, entityOld.getUuid()); if(editionOneAlbumOld.hasSameKey(editionOneAlbumNew)){ $Album.editionOneAlbumStructure.remove(editionOneAlbumOld); $Album.editionOneAlbumStructure.add(editionOneAlbumNew); } this.uuid = uuidOld; $Album.entityStructure.remove(entityOld); $Album.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Album entity) { UniqueOneAlbum unique = new UniqueOneAlbum (entity, entity.getUuid()); return $Album.uniqueOneAlbumStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Album.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setNumero(pull.pullInteger()); this.setNome(pull.pullString()); this.setCompartilhar(pull.pullBoolean()); int totalFotos = pull.pullInteger(); for (int i = 0; i < totalFotos; i++) {this.uuidFotos.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Album.classId); push.pushUuid(uuid); push.pushInteger(this.getNumero()); push.pushString(this.getNome()); push.pushBoolean(this.isCompartilhar()); push.pushInteger(this.uuidFotos.size()); for (Uuid uuidPush : this.uuidFotos) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfString(this.getNome()) + Page.sizeOfBoolean + Page.sizeOfEntityCollection(this.uuidFotos); } static{ numero.getSchemas().add( new Schema<$Album, UniqueOneAlbum, Integer>() { @Override public $Album newEntity(Integer value) { $Album obj = new $Album(); obj.setNumero(value); return obj; } @Override public UniqueOneAlbum newKey(Integer value) { UniqueOneAlbum obj = new UniqueOneAlbum(); obj.setNumero(value); return obj; } @Override public EntityStructure<$Album> getEntityStructure() { return $Album.entityStructure; } @Override public KeyStructure<UniqueOneAlbum> getKeyStructure() { return UniqueOneAlbum.uniqueOneAlbumStructure; } } ); nome.getSchemas().add( new Schema<$Album, EditionOneAlbum, java.lang.String>() { @Override public $Album newEntity(java.lang.String value) { $Album obj = new $Album(); obj.setNome(value); return obj; } @Override public EditionOneAlbum newKey(java.lang.String value) { EditionOneAlbum obj = new EditionOneAlbum(); obj.setNome(value); return obj; } @Override public EntityStructure<$Album> getEntityStructure() { return $Album.entityStructure; } @Override public KeyStructure<EditionOneAlbum> getKeyStructure() { return EditionOneAlbum.editionOneAlbumStructure; } } ); } } 