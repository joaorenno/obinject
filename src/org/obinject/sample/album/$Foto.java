package org.obinject.sample.album; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; import org.obinject.storage.RTree; public class $Foto extends Foto implements Entity<$Foto> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Foto.classId == null) {$Foto.classId = Uuid.fromString("38CE962B-2580-ABAB-2951-48D0739C9EFE"); }return $Foto.classId; } public static final BTreeEntity<$Foto> entityStructure = new BTreeEntity<$Foto>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final BTree<UniqueOneFoto> uniqueOneFotoStructure = new BTree<UniqueOneFoto>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final RTree<RectangleOneFoto> rectangleOneFotoStructure = new RTree<RectangleOneFoto>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final MTree<CoordinateOneFoto> coordinateOneFotoStructure = new MTree<CoordinateOneFoto>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final MTree<FeatureOneFoto> featureOneFotoStructure = new MTree<FeatureOneFoto>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final MTree<PointOneFoto> pointOneFotoStructure = new MTree<PointOneFoto>(new File("build/classes/org/obinject/sample/album/album.dbo", 4096)){}; public static final Attribute<Integer> codigo = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Foto)entity).getCodigo(); } }; public static final Attribute<java.awt.image.BufferedImage> imagem = new Attribute<java.awt.image.BufferedImage> (){ @Override public java.awt.image.BufferedImage valueOfAttribute(Entity entity) { return ((Foto)entity).getImagem(); } }; public static final Attribute<Double> latitude = new Attribute<Double> (){ @Override public Double valueOfAttribute(Entity entity) { return ((Foto)entity).getLatitude(); } }; public static final Attribute<Double> longitude = new Attribute<Double> (){ @Override public Double valueOfAttribute(Entity entity) { return ((Foto)entity).getLongitude(); } }; public static final Attribute<java.util.Date> data = new Attribute<java.util.Date> (){ @Override public java.util.Date valueOfAttribute(Entity entity) { return ((Foto)entity).getData(); } }; public static final Attribute<org.obinject.sample.album.Local> local = new Attribute<org.obinject.sample.album.Local> (){ @Override public org.obinject.sample.album.Local valueOfAttribute(Entity entity) { return ((Foto)entity).getLocal(); } }; public static final Attribute<java.util.List> pessoas = new Attribute<java.util.List> (){ @Override public java.util.List valueOfAttribute(Entity entity) { return ((Foto)entity).getPessoas(); } }; public $Foto(){ this.uuid = Uuid.generator(); } public $Foto(Foto obj){ this.setCodigo(obj.getCodigo()); this.setImagem(obj.getImagem()); this.setLatitude(obj.getLatitude()); this.setLongitude(obj.getLongitude()); this.setData(obj.getData()); this.setLocal(obj.getLocal()); this.setPessoas(obj.getPessoas()); this.uuid = Uuid.generator(); } public $Foto(Foto obj, Uuid uuid){ this.setCodigo(obj.getCodigo()); this.setImagem(obj.getImagem()); this.setLatitude(obj.getLatitude()); this.setLongitude(obj.getLongitude()); this.setData(obj.getData()); this.setLocal(obj.getLocal()); this.setPessoas(obj.getPessoas()); this.uuid = uuid; } public $Foto($Foto obj){ this.setCodigo(obj.getCodigo()); this.setImagem(obj.getImagem()); this.setLatitude(obj.getLatitude()); this.setLongitude(obj.getLongitude()); this.setData(obj.getData()); this.setLocal(obj.getLocal()); this.setPessoas(obj.getPessoas()); this.uuid = obj.getUuid();; } public $Foto(Uuid uuid){ this.uuid = uuid; } protected Uuid uuidLocal; @Override public Local getLocal(){ Local superLocal = super.getLocal(); if (superLocal == null && uuidLocal != null) {superLocal = $Local.entityStructure.find(uuidLocal); this.setLocal(superLocal); }return superLocal; }private void resetUuidLocal() { if (this.getLocal() != null) { if (this.getLocal() instanceof Entity) { uuidLocal = ((Entity) this.getLocal()).getUuid(); } else { $Local entity = new $Local (this.getLocal()); uuidLocal = $Local.find(entity); if (uuidLocal == null) { throw new TransientObjectException("Foto", "local", "Local"); } } } }protected java.util.List<Uuid> uuidPessoas = new java.util.ArrayList<>(); @Override public java.util.List<org.obinject.sample.album.Pessoa> getPessoas() {java.util.List<org.obinject.sample.album.Pessoa> superPessoas = super.getPessoas(); if ((superPessoas.isEmpty()) && (!uuidPessoas.isEmpty())) {for (Uuid uuid : uuidPessoas) {superPessoas.add($Pessoa.entityStructure.find(uuid)); } }return superPessoas; }private void resetUuidPessoas(){ uuidPessoas.clear(); if (this.getPessoas() != null) {for (Pessoa obj : this.getPessoas()) { if (obj instanceof Entity) { uuidPessoas.add(((Entity) obj).getUuid()); } else { $Pessoa entity = new $Pessoa (obj); uuidPessoas.add($Pessoa.find(entity)); if (uuidPessoas == null) { throw new TransientObjectException("Foto", "pessoas", "Pessoa"); } } } } }@Override public boolean isEqual($Foto obj) { return (this.getCodigo() == obj.getCodigo()) && (this.getLatitude() == obj.getLatitude()) && (this.getLongitude() == obj.getLongitude()) && (((this.getData() == null) && (obj.getData() == null)) || ((this.getData() != null) && (obj.getData() != null) && (this.getData().equals( obj.getData())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Foto> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Foto.find(this); if(uuidInject == null){ resetUuidLocal(); resetUuidPessoas(); $Foto.entityStructure.add(this); UniqueOneFoto.uniqueOneFotoStructure.add(new UniqueOneFoto(this, this.getUuid())); RectangleOneFoto.rectangleOneFotoStructure.add(new RectangleOneFoto(this, this.getUuid())); CoordinateOneFoto.coordinateOneFotoStructure.add(new CoordinateOneFoto(this, this.getUuid())); FeatureOneFoto.featureOneFotoStructure.add(new FeatureOneFoto(this, this.getUuid())); PointOneFoto.pointOneFotoStructure.add(new PointOneFoto(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Foto.find(this); if(uuidReject != null){ UniqueOneFoto.uniqueOneFotoStructure.remove(new UniqueOneFoto(this, this.getUuid())); RectangleOneFoto.rectangleOneFotoStructure.remove(new RectangleOneFoto(this, this.getUuid())); CoordinateOneFoto.coordinateOneFotoStructure.remove(new CoordinateOneFoto(this, this.getUuid())); FeatureOneFoto.featureOneFotoStructure.remove(new FeatureOneFoto(this, this.getUuid())); PointOneFoto.pointOneFotoStructure.remove(new PointOneFoto(this, this.getUuid())); $Foto.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Foto.find(this); $Foto entityOld = $Foto.entityStructure.find(uuidOld); if(entityOld != null){ resetUuidLocal(); resetUuidPessoas(); UniqueOneFoto uniqueOneFotoOld = new UniqueOneFoto(entityOld, entityOld.getUuid()); UniqueOneFoto uniqueOneFotoNew = new UniqueOneFoto(this, entityOld.getUuid()); if(uniqueOneFotoOld.hasSameKey(uniqueOneFotoNew)){ $Foto.uniqueOneFotoStructure.remove(uniqueOneFotoOld); $Foto.uniqueOneFotoStructure.add(uniqueOneFotoNew); } RectangleOneFoto rectangleOneFotoOld = new RectangleOneFoto(entityOld, entityOld.getUuid()); RectangleOneFoto rectangleOneFotoNew = new RectangleOneFoto(this, entityOld.getUuid()); if(rectangleOneFotoOld.hasSameKey(rectangleOneFotoNew)){ $Foto.rectangleOneFotoStructure.remove(rectangleOneFotoOld); $Foto.rectangleOneFotoStructure.add(rectangleOneFotoNew); } CoordinateOneFoto coordinateOneFotoOld = new CoordinateOneFoto(entityOld, entityOld.getUuid()); CoordinateOneFoto coordinateOneFotoNew = new CoordinateOneFoto(this, entityOld.getUuid()); if(coordinateOneFotoOld.hasSameKey(coordinateOneFotoNew)){ $Foto.coordinateOneFotoStructure.remove(coordinateOneFotoOld); $Foto.coordinateOneFotoStructure.add(coordinateOneFotoNew); } FeatureOneFoto featureOneFotoOld = new FeatureOneFoto(entityOld, entityOld.getUuid()); FeatureOneFoto featureOneFotoNew = new FeatureOneFoto(this, entityOld.getUuid()); if(featureOneFotoOld.hasSameKey(featureOneFotoNew)){ $Foto.featureOneFotoStructure.remove(featureOneFotoOld); $Foto.featureOneFotoStructure.add(featureOneFotoNew); } PointOneFoto pointOneFotoOld = new PointOneFoto(entityOld, entityOld.getUuid()); PointOneFoto pointOneFotoNew = new PointOneFoto(this, entityOld.getUuid()); if(pointOneFotoOld.hasSameKey(pointOneFotoNew)){ $Foto.pointOneFotoStructure.remove(pointOneFotoOld); $Foto.pointOneFotoStructure.add(pointOneFotoNew); } this.uuid = uuidOld; $Foto.entityStructure.remove(entityOld); $Foto.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Foto entity) { UniqueOneFoto unique = new UniqueOneFoto (entity, entity.getUuid()); return $Foto.uniqueOneFotoStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Foto.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setCodigo(pull.pullInteger()); this.setLatitude(pull.pullDouble()); this.setLongitude(pull.pullDouble()); this.setData(pull.pullDate()); int totalLocal = pull.pullInteger(); if(totalLocal > 0){this.uuidLocal = pull.pullUuid(); }int totalPessoas = pull.pullInteger(); for (int i = 0; i < totalPessoas; i++) {this.uuidPessoas.add(pull.pullUuid()); }return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Foto.classId); push.pushUuid(uuid); push.pushInteger(this.getCodigo()); push.pushDouble(this.getLatitude()); push.pushDouble(this.getLongitude()); push.pushDate(this.getData()); if (this.uuidLocal != null) { push.pushInteger(1); push.pushUuid(this.uuidLocal); } else {push.pushInteger(0); } push.pushInteger(this.uuidPessoas.size()); for (Uuid uuidPush : this.uuidPessoas) {push.pushUuid(uuidPush); }} @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfDouble + Page.sizeOfDouble + Page.sizeOfDate + Page.sizeOfEntity(this.uuidLocal) + Page.sizeOfEntityCollection(this.uuidPessoas); } static{ codigo.getSchemas().add( new Schema<$Foto, UniqueOneFoto, Integer>() { @Override public $Foto newEntity(Integer value) { $Foto obj = new $Foto(); obj.setCodigo(value); return obj; } @Override public UniqueOneFoto newKey(Integer value) { UniqueOneFoto obj = new UniqueOneFoto(); obj.setCodigo(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<UniqueOneFoto> getKeyStructure() { return UniqueOneFoto.uniqueOneFotoStructure; } } ); imagem.getSchemas().add( new Schema<$Foto, FeatureOneFoto, java.awt.image.BufferedImage>() { @Override public $Foto newEntity(java.awt.image.BufferedImage value) { $Foto obj = new $Foto(); obj.setImagem(value); return obj; } @Override public FeatureOneFoto newKey(java.awt.image.BufferedImage value) { FeatureOneFoto obj = new FeatureOneFoto(); obj.setImagem(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<FeatureOneFoto> getKeyStructure() { return FeatureOneFoto.featureOneFotoStructure; } } ); imagem.getSchemas().add( new Schema<$Foto, FeatureOneFoto, java.awt.image.BufferedImage>() { @Override public $Foto newEntity(java.awt.image.BufferedImage value) { $Foto obj = new $Foto(); obj.setImagem(value); return obj; } @Override public FeatureOneFoto newKey(java.awt.image.BufferedImage value) { FeatureOneFoto obj = new FeatureOneFoto(); obj.setImagem(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<FeatureOneFoto> getKeyStructure() { return FeatureOneFoto.featureOneFotoStructure; } } ); latitude.getSchemas().add( new Schema<$Foto, RectangleOneFoto, Double>() { @Override public $Foto newEntity(Double value) { $Foto obj = new $Foto(); obj.setLatitude(value); return obj; } @Override public RectangleOneFoto newKey(Double value) { RectangleOneFoto obj = new RectangleOneFoto(); obj.setLatitude(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<RectangleOneFoto> getKeyStructure() { return RectangleOneFoto.rectangleOneFotoStructure; } } ); latitude.getSchemas().add( new Schema<$Foto, PointOneFoto, Double>() { @Override public $Foto newEntity(Double value) { $Foto obj = new $Foto(); obj.setLatitude(value); return obj; } @Override public PointOneFoto newKey(Double value) { PointOneFoto obj = new PointOneFoto(); obj.setLatitude(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<PointOneFoto> getKeyStructure() { return PointOneFoto.pointOneFotoStructure; } } ); latitude.getSchemas().add( new Schema<$Foto, CoordinateOneFoto, Double>() { @Override public $Foto newEntity(Double value) { $Foto obj = new $Foto(); obj.setLatitude(value); return obj; } @Override public CoordinateOneFoto newKey(Double value) { CoordinateOneFoto obj = new CoordinateOneFoto(); obj.setLatitude(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<CoordinateOneFoto> getKeyStructure() { return CoordinateOneFoto.coordinateOneFotoStructure; } } ); longitude.getSchemas().add( new Schema<$Foto, RectangleOneFoto, Double>() { @Override public $Foto newEntity(Double value) { $Foto obj = new $Foto(); obj.setLongitude(value); return obj; } @Override public RectangleOneFoto newKey(Double value) { RectangleOneFoto obj = new RectangleOneFoto(); obj.setLongitude(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<RectangleOneFoto> getKeyStructure() { return RectangleOneFoto.rectangleOneFotoStructure; } } ); longitude.getSchemas().add( new Schema<$Foto, PointOneFoto, Double>() { @Override public $Foto newEntity(Double value) { $Foto obj = new $Foto(); obj.setLongitude(value); return obj; } @Override public PointOneFoto newKey(Double value) { PointOneFoto obj = new PointOneFoto(); obj.setLongitude(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<PointOneFoto> getKeyStructure() { return PointOneFoto.pointOneFotoStructure; } } ); longitude.getSchemas().add( new Schema<$Foto, CoordinateOneFoto, Double>() { @Override public $Foto newEntity(Double value) { $Foto obj = new $Foto(); obj.setLongitude(value); return obj; } @Override public CoordinateOneFoto newKey(Double value) { CoordinateOneFoto obj = new CoordinateOneFoto(); obj.setLongitude(value); return obj; } @Override public EntityStructure<$Foto> getEntityStructure() { return $Foto.entityStructure; } @Override public KeyStructure<CoordinateOneFoto> getKeyStructure() { return CoordinateOneFoto.coordinateOneFotoStructure; } } ); } } 