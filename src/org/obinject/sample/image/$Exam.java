package org.obinject.sample.image; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; public class $Exam extends Exam implements Entity<$Exam> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($Exam.classId == null) {$Exam.classId = Uuid.fromString("E6E474BF-EBDD-7660-E14E-D3EE7C7010F9"); }return $Exam.classId; } public static final BTreeEntity<$Exam> entityStructure = new BTreeEntity<$Exam>(new File("build/classes/org/obinject/sample/image/image.dbo", 4096)){}; public static final BTree<UniqueOneExam> uniqueOneExamStructure = new BTree<UniqueOneExam>(new File("build/classes/org/obinject/sample/image/image.dbo", 4096)){}; public static final MTree<EditionOneExam> editionOneExamStructure = new MTree<EditionOneExam>(new File("build/classes/org/obinject/sample/image/image.dbo", 4096)){}; public static final MTree<FeatureOneExam> featureOneExamStructure = new MTree<FeatureOneExam>(new File("build/classes/org/obinject/sample/image/image.dbo", 4096)){}; public static final MTree<FeatureTwoExam> featureTwoExamStructure = new MTree<FeatureTwoExam>(new File("build/classes/org/obinject/sample/image/image.dbo", 4096)){}; public static final Attribute<Integer> id = new Attribute<Integer> (){ @Override public Integer valueOfAttribute(Entity entity) { return ((Exam)entity).getId(); } }; public static final Attribute<java.lang.String> name = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((Exam)entity).getName(); } }; public static final Attribute<java.awt.image.BufferedImage> image = new Attribute<java.awt.image.BufferedImage> (){ @Override public java.awt.image.BufferedImage valueOfAttribute(Entity entity) { return ((Exam)entity).getImage(); } }; public $Exam(){ this.uuid = Uuid.generator(); } public $Exam(Exam obj){ this.setId(obj.getId()); this.setName(obj.getName()); this.setImage(obj.getImage()); this.uuid = Uuid.generator(); } public $Exam(Exam obj, Uuid uuid){ this.setId(obj.getId()); this.setName(obj.getName()); this.setImage(obj.getImage()); this.uuid = uuid; } public $Exam($Exam obj){ this.setId(obj.getId()); this.setName(obj.getName()); this.setImage(obj.getImage()); this.uuid = obj.getUuid();; } public $Exam(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($Exam obj) { return (this.getId() == obj.getId()) && (((this.getName() == null) && (obj.getName() == null)) || ((this.getName() != null) && (obj.getName() != null) && (this.getName().equals( obj.getName())))); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$Exam> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $Exam.find(this); if(uuidInject == null){ $Exam.entityStructure.add(this); UniqueOneExam.uniqueOneExamStructure.add(new UniqueOneExam(this, this.getUuid())); EditionOneExam.editionOneExamStructure.add(new EditionOneExam(this, this.getUuid())); FeatureOneExam.featureOneExamStructure.add(new FeatureOneExam(this, this.getUuid())); FeatureTwoExam.featureTwoExamStructure.add(new FeatureTwoExam(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $Exam.find(this); if(uuidReject != null){ UniqueOneExam.uniqueOneExamStructure.remove(new UniqueOneExam(this, this.getUuid())); EditionOneExam.editionOneExamStructure.remove(new EditionOneExam(this, this.getUuid())); FeatureOneExam.featureOneExamStructure.remove(new FeatureOneExam(this, this.getUuid())); FeatureTwoExam.featureTwoExamStructure.remove(new FeatureTwoExam(this, this.getUuid())); $Exam.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $Exam.find(this); $Exam entityOld = $Exam.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneExam uniqueOneExamOld = new UniqueOneExam(entityOld, entityOld.getUuid()); UniqueOneExam uniqueOneExamNew = new UniqueOneExam(this, entityOld.getUuid()); if(uniqueOneExamOld.hasSameKey(uniqueOneExamNew)){ $Exam.uniqueOneExamStructure.remove(uniqueOneExamOld); $Exam.uniqueOneExamStructure.add(uniqueOneExamNew); } EditionOneExam editionOneExamOld = new EditionOneExam(entityOld, entityOld.getUuid()); EditionOneExam editionOneExamNew = new EditionOneExam(this, entityOld.getUuid()); if(editionOneExamOld.hasSameKey(editionOneExamNew)){ $Exam.editionOneExamStructure.remove(editionOneExamOld); $Exam.editionOneExamStructure.add(editionOneExamNew); } FeatureOneExam featureOneExamOld = new FeatureOneExam(entityOld, entityOld.getUuid()); FeatureOneExam featureOneExamNew = new FeatureOneExam(this, entityOld.getUuid()); if(featureOneExamOld.hasSameKey(featureOneExamNew)){ $Exam.featureOneExamStructure.remove(featureOneExamOld); $Exam.featureOneExamStructure.add(featureOneExamNew); } FeatureTwoExam featureTwoExamOld = new FeatureTwoExam(entityOld, entityOld.getUuid()); FeatureTwoExam featureTwoExamNew = new FeatureTwoExam(this, entityOld.getUuid()); if(featureTwoExamOld.hasSameKey(featureTwoExamNew)){ $Exam.featureTwoExamStructure.remove(featureTwoExamOld); $Exam.featureTwoExamStructure.add(featureTwoExamNew); } this.uuid = uuidOld; $Exam.entityStructure.remove(entityOld); $Exam.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($Exam entity) { UniqueOneExam unique = new UniqueOneExam (entity, entity.getUuid()); return $Exam.uniqueOneExamStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($Exam.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setId(pull.pullInteger()); this.setName(pull.pullString()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($Exam.classId); push.pushUuid(uuid); push.pushInteger(this.getId()); push.pushString(this.getName()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfInteger + Page.sizeOfString(this.getName()); } static{ id.getSchemas().add( new Schema<$Exam, UniqueOneExam, Integer>() { @Override public $Exam newEntity(Integer value) { $Exam obj = new $Exam(); obj.setId(value); return obj; } @Override public UniqueOneExam newKey(Integer value) { UniqueOneExam obj = new UniqueOneExam(); obj.setId(value); return obj; } @Override public EntityStructure<$Exam> getEntityStructure() { return $Exam.entityStructure; } @Override public KeyStructure<UniqueOneExam> getKeyStructure() { return UniqueOneExam.uniqueOneExamStructure; } } ); name.getSchemas().add( new Schema<$Exam, EditionOneExam, java.lang.String>() { @Override public $Exam newEntity(java.lang.String value) { $Exam obj = new $Exam(); obj.setName(value); return obj; } @Override public EditionOneExam newKey(java.lang.String value) { EditionOneExam obj = new EditionOneExam(); obj.setName(value); return obj; } @Override public EntityStructure<$Exam> getEntityStructure() { return $Exam.entityStructure; } @Override public KeyStructure<EditionOneExam> getKeyStructure() { return EditionOneExam.editionOneExamStructure; } } ); image.getSchemas().add( new Schema<$Exam, FeatureOneExam, java.awt.image.BufferedImage>() { @Override public $Exam newEntity(java.awt.image.BufferedImage value) { $Exam obj = new $Exam(); obj.setImage(value); return obj; } @Override public FeatureOneExam newKey(java.awt.image.BufferedImage value) { FeatureOneExam obj = new FeatureOneExam(); obj.setImage(value); return obj; } @Override public EntityStructure<$Exam> getEntityStructure() { return $Exam.entityStructure; } @Override public KeyStructure<FeatureOneExam> getKeyStructure() { return FeatureOneExam.featureOneExamStructure; } } ); image.getSchemas().add( new Schema<$Exam, FeatureTwoExam, java.awt.image.BufferedImage>() { @Override public $Exam newEntity(java.awt.image.BufferedImage value) { $Exam obj = new $Exam(); obj.setImage(value); return obj; } @Override public FeatureTwoExam newKey(java.awt.image.BufferedImage value) { FeatureTwoExam obj = new FeatureTwoExam(); obj.setImage(value); return obj; } @Override public EntityStructure<$Exam> getEntityStructure() { return $Exam.entityStructure; } @Override public KeyStructure<FeatureTwoExam> getKeyStructure() { return FeatureTwoExam.featureTwoExamStructure; } } ); } } 