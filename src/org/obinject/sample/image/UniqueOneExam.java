package org.obinject.sample.image; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOneExam extends $Exam implements Sort<UniqueOneExam>, Comparable<UniqueOneExam> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOneExam.classId == null) {UniqueOneExam.classId = Uuid.fromString("3A0C4436-2C90-8727-38B9-F9BE3EAA2613"); }return UniqueOneExam.classId; } public UniqueOneExam(){} public UniqueOneExam($Exam obj){ super(obj); } public UniqueOneExam(Exam obj, Uuid uuid){ super(obj, uuid); } public UniqueOneExam(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOneExam obj) { return (this.getId() == obj.getId()); } @Override public int compareTo(UniqueOneExam obj) { if ((this.getId() < obj.getId())) { return -1; } else if ((this.getId() == obj.getId())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOneExam> getKeyStructure() { return uniqueOneExamStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setId(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getId()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 