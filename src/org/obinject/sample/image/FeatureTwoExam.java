package org.obinject.sample.image; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Metric; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; import java.awt.image.BufferedImage; import org.obinject.meta.generator.ExtractionUtil; public class FeatureTwoExam extends $Exam implements Metric<FeatureTwoExam> { private static Uuid classId; public static Uuid getClassId(){ if (FeatureTwoExam.classId == null) {FeatureTwoExam.classId = Uuid.fromString("32C9B207-DF98-CF58-961E-38E6AF25CEAD"); }return FeatureTwoExam.classId; } private double preservedDistance; private double featureVectorFirst[]; public FeatureTwoExam(){ featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImage()); } public FeatureTwoExam($Exam obj){ super(obj); featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImage()); } public FeatureTwoExam(Exam obj, Uuid uuid){ super(obj, uuid); featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImage()); } public FeatureTwoExam(Uuid uuid){ super(uuid); featureVectorFirst= ExtractionUtil.histogramStatistical(this.getImage()); } @Override public boolean hasSameKey(FeatureTwoExam obj) { return Page.matricesAreEqual(this.featureVectorFirst, obj.featureVectorFirst) ; } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public double distanceTo(FeatureTwoExam obj){ return DistanceUtil.euclidean(this.featureVectorFirst, obj.featureVectorFirst) ; } @Override public KeyStructure<FeatureTwoExam> getKeyStructure() { return featureTwoExamStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); featureVectorFirst = (double[]) pull.pullMatrix(); return true; } @Override public void setImage(BufferedImage image) {super.setImage(image); featureVectorFirst = ExtractionUtil.histogramStatistical(this.getImage()); } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushMatrix(featureVectorFirst); } @Override public int sizeOfKey() { return Page.sizeOfMatrix(featureVectorFirst); } } 