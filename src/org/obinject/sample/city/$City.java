package org.obinject.sample.city; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.device.File; import org.obinject.exception.TransientObjectException; import org.obinject.meta.Entity; import org.obinject.meta.Uuid; import org.obinject.queries.Attribute; import org.obinject.queries.Schema; import org.obinject.storage.BTree; import org.obinject.storage.BTreeEntity; import org.obinject.storage.EntityStructure; import org.obinject.storage.KeyStructure; import org.obinject.storage.Structure; import org.obinject.storage.MTree; import org.obinject.storage.RTree; public class $City extends City implements Entity<$City> { protected Uuid uuid; private static Uuid classId; public static Uuid getClassId(){ if ($City.classId == null) {$City.classId = Uuid.fromString("26126211-C189-161E-9885-3580B7768D57"); }return $City.classId; } public static final BTreeEntity<$City> entityStructure = new BTreeEntity<$City>(new File("build/classes/org/obinject/sample/city/city.dbo", 4096)){}; public static final BTree<UniqueOneCity> uniqueOneCityStructure = new BTree<UniqueOneCity>(new File("build/classes/org/obinject/sample/city/city.dbo", 4096)){}; public static final RTree<RectangleOneCity> rectangleOneCityStructure = new RTree<RectangleOneCity>(new File("build/classes/org/obinject/sample/city/city.dbo", 4096)){}; public static final MTree<EditionOneCity> editionOneCityStructure = new MTree<EditionOneCity>(new File("build/classes/org/obinject/sample/city/city.dbo", 4096)){}; public static final MTree<PointOneCity> pointOneCityStructure = new MTree<PointOneCity>(new File("build/classes/org/obinject/sample/city/city.dbo", 4096)){}; public static final Attribute<java.lang.String> name = new Attribute<java.lang.String> (){ @Override public java.lang.String valueOfAttribute(Entity entity) { return ((City)entity).getName(); } }; public static final Attribute<Double> latitude = new Attribute<Double> (){ @Override public Double valueOfAttribute(Entity entity) { return ((City)entity).getLatitude(); } }; public static final Attribute<Double> longitude = new Attribute<Double> (){ @Override public Double valueOfAttribute(Entity entity) { return ((City)entity).getLongitude(); } }; public $City(){ this.uuid = Uuid.generator(); } public $City(City obj){ this.setName(obj.getName()); this.setLatitude(obj.getLatitude()); this.setLongitude(obj.getLongitude()); this.uuid = Uuid.generator(); } public $City(City obj, Uuid uuid){ this.setName(obj.getName()); this.setLatitude(obj.getLatitude()); this.setLongitude(obj.getLongitude()); this.uuid = uuid; } public $City($City obj){ this.setName(obj.getName()); this.setLatitude(obj.getLatitude()); this.setLongitude(obj.getLongitude()); this.uuid = obj.getUuid();; } public $City(Uuid uuid){ this.uuid = uuid; } @Override public boolean isEqual($City obj) {  return (((this.getName() == null) && (obj.getName() == null)) || ((this.getName() != null) && (obj.getName() != null) && (this.getName().equals( obj.getName())))) && (this.getLatitude() == obj.getLatitude()) && (this.getLongitude() == obj.getLongitude()); } @Override public Uuid getUuid() { return this.uuid; } @Override public EntityStructure<$City> getEntityStructure() { return entityStructure; } @Override public boolean inject(){ Uuid uuidInject = $City.find(this); if(uuidInject == null){ $City.entityStructure.add(this); UniqueOneCity.uniqueOneCityStructure.add(new UniqueOneCity(this, this.getUuid())); RectangleOneCity.rectangleOneCityStructure.add(new RectangleOneCity(this, this.getUuid())); EditionOneCity.editionOneCityStructure.add(new EditionOneCity(this, this.getUuid())); PointOneCity.pointOneCityStructure.add(new PointOneCity(this, this.getUuid())); return true; }else{ this.uuid = uuidInject; return false; } } @Override public boolean reject(){ Uuid uuidReject = $City.find(this); if(uuidReject != null){ UniqueOneCity.uniqueOneCityStructure.remove(new UniqueOneCity(this, this.getUuid())); RectangleOneCity.rectangleOneCityStructure.remove(new RectangleOneCity(this, this.getUuid())); EditionOneCity.editionOneCityStructure.remove(new EditionOneCity(this, this.getUuid())); PointOneCity.pointOneCityStructure.remove(new PointOneCity(this, this.getUuid())); $City.entityStructure.remove(this); return true; }else{ return false; } } @Override public boolean modify(){ Uuid uuidOld = $City.find(this); $City entityOld = $City.entityStructure.find(uuidOld); if(entityOld != null){ UniqueOneCity uniqueOneCityOld = new UniqueOneCity(entityOld, entityOld.getUuid()); UniqueOneCity uniqueOneCityNew = new UniqueOneCity(this, entityOld.getUuid()); if(uniqueOneCityOld.hasSameKey(uniqueOneCityNew)){ $City.uniqueOneCityStructure.remove(uniqueOneCityOld); $City.uniqueOneCityStructure.add(uniqueOneCityNew); } RectangleOneCity rectangleOneCityOld = new RectangleOneCity(entityOld, entityOld.getUuid()); RectangleOneCity rectangleOneCityNew = new RectangleOneCity(this, entityOld.getUuid()); if(rectangleOneCityOld.hasSameKey(rectangleOneCityNew)){ $City.rectangleOneCityStructure.remove(rectangleOneCityOld); $City.rectangleOneCityStructure.add(rectangleOneCityNew); } EditionOneCity editionOneCityOld = new EditionOneCity(entityOld, entityOld.getUuid()); EditionOneCity editionOneCityNew = new EditionOneCity(this, entityOld.getUuid()); if(editionOneCityOld.hasSameKey(editionOneCityNew)){ $City.editionOneCityStructure.remove(editionOneCityOld); $City.editionOneCityStructure.add(editionOneCityNew); } PointOneCity pointOneCityOld = new PointOneCity(entityOld, entityOld.getUuid()); PointOneCity pointOneCityNew = new PointOneCity(this, entityOld.getUuid()); if(pointOneCityOld.hasSameKey(pointOneCityNew)){ $City.pointOneCityStructure.remove(pointOneCityOld); $City.pointOneCityStructure.add(pointOneCityNew); } this.uuid = uuidOld; $City.entityStructure.remove(entityOld); $City.entityStructure.add(this); return true; }else{ return false; } } public static Uuid find($City entity) { UniqueOneCity unique = new UniqueOneCity (entity, entity.getUuid()); return $City.uniqueOneCityStructure.find(unique); } @Override public boolean pullEntity(byte[] array, int position) { PullPage pull = new PullPage(array, position); Uuid storedClass = pull.pullUuid(); if ($City.classId.equals(storedClass) == true){ uuid = pull.pullUuid(); this.setName(pull.pullString()); this.setLatitude(pull.pullDouble()); this.setLongitude(pull.pullDouble()); return true; } return false; } @Override public void pushEntity(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushUuid($City.classId); push.pushUuid(uuid); push.pushString(this.getName()); push.pushDouble(this.getLatitude()); push.pushDouble(this.getLongitude()); } @Override public int sizeOfEntity() { return Page.sizeOfUuid + Page.sizeOfUuid  + Page.sizeOfString(this.getName()) + Page.sizeOfDouble + Page.sizeOfDouble; } static{ name.getSchemas().add( new Schema<$City, UniqueOneCity, java.lang.String>() { @Override public $City newEntity(java.lang.String value) { $City obj = new $City(); obj.setName(value); return obj; } @Override public UniqueOneCity newKey(java.lang.String value) { UniqueOneCity obj = new UniqueOneCity(); obj.setName(value); return obj; } @Override public EntityStructure<$City> getEntityStructure() { return $City.entityStructure; } @Override public KeyStructure<UniqueOneCity> getKeyStructure() { return UniqueOneCity.uniqueOneCityStructure; } } ); name.getSchemas().add( new Schema<$City, EditionOneCity, java.lang.String>() { @Override public $City newEntity(java.lang.String value) { $City obj = new $City(); obj.setName(value); return obj; } @Override public EditionOneCity newKey(java.lang.String value) { EditionOneCity obj = new EditionOneCity(); obj.setName(value); return obj; } @Override public EntityStructure<$City> getEntityStructure() { return $City.entityStructure; } @Override public KeyStructure<EditionOneCity> getKeyStructure() { return EditionOneCity.editionOneCityStructure; } } ); latitude.getSchemas().add( new Schema<$City, RectangleOneCity, Double>() { @Override public $City newEntity(Double value) { $City obj = new $City(); obj.setLatitude(value); return obj; } @Override public RectangleOneCity newKey(Double value) { RectangleOneCity obj = new RectangleOneCity(); obj.setLatitude(value); return obj; } @Override public EntityStructure<$City> getEntityStructure() { return $City.entityStructure; } @Override public KeyStructure<RectangleOneCity> getKeyStructure() { return RectangleOneCity.rectangleOneCityStructure; } } ); latitude.getSchemas().add( new Schema<$City, PointOneCity, Double>() { @Override public $City newEntity(Double value) { $City obj = new $City(); obj.setLatitude(value); return obj; } @Override public PointOneCity newKey(Double value) { PointOneCity obj = new PointOneCity(); obj.setLatitude(value); return obj; } @Override public EntityStructure<$City> getEntityStructure() { return $City.entityStructure; } @Override public KeyStructure<PointOneCity> getKeyStructure() { return PointOneCity.pointOneCityStructure; } } ); longitude.getSchemas().add( new Schema<$City, RectangleOneCity, Double>() { @Override public $City newEntity(Double value) { $City obj = new $City(); obj.setLongitude(value); return obj; } @Override public RectangleOneCity newKey(Double value) { RectangleOneCity obj = new RectangleOneCity(); obj.setLongitude(value); return obj; } @Override public EntityStructure<$City> getEntityStructure() { return $City.entityStructure; } @Override public KeyStructure<RectangleOneCity> getKeyStructure() { return RectangleOneCity.rectangleOneCityStructure; } } ); longitude.getSchemas().add( new Schema<$City, PointOneCity, Double>() { @Override public $City newEntity(Double value) { $City obj = new $City(); obj.setLongitude(value); return obj; } @Override public PointOneCity newKey(Double value) { PointOneCity obj = new PointOneCity(); obj.setLongitude(value); return obj; } @Override public EntityStructure<$City> getEntityStructure() { return $City.entityStructure; } @Override public KeyStructure<PointOneCity> getKeyStructure() { return PointOneCity.pointOneCityStructure; } } ); } } 