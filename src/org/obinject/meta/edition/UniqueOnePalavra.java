package org.obinject.meta.edition; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.Sort; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class UniqueOnePalavra extends $Palavra implements Sort<UniqueOnePalavra>, Comparable<UniqueOnePalavra> { private static Uuid classId; public static Uuid getClassId(){ if (UniqueOnePalavra.classId == null) {UniqueOnePalavra.classId = Uuid.fromString("1B530FE6-34BE-7D8A-4D7E-97A30F5AD648"); }return UniqueOnePalavra.classId; } public UniqueOnePalavra(){} public UniqueOnePalavra($Palavra obj){ super(obj); } public UniqueOnePalavra(Palavra obj, Uuid uuid){ super(obj, uuid); } public UniqueOnePalavra(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(UniqueOnePalavra obj) { return (this.getCodigo() == obj.getCodigo()); } @Override public int compareTo(UniqueOnePalavra obj) { if ((this.getCodigo() < obj.getCodigo())) { return -1; } else if ((this.getCodigo() == obj.getCodigo())) { return 0; } else {return 1; } } @Override public KeyStructure<UniqueOnePalavra> getKeyStructure() { return uniqueOnePalavraStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); this.setCodigo(pull.pullInteger()); return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); push.pushInteger(this.getCodigo()); } @Override public int sizeOfKey() { return  + Page.sizeOfInteger; } } 