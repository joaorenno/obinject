package org.obinject.meta.rectangle; import org.obinject.block.Page; import org.obinject.block.PullPage; import org.obinject.block.PushPage; import org.obinject.meta.generator.DistanceUtil; import org.obinject.meta.Rectangle; import org.obinject.meta.Uuid; import org.obinject.storage.KeyStructure; public class RectangleOneMultiDimension extends $MultiDimension implements Rectangle<RectangleOneMultiDimension> { private static Uuid classId; public static Uuid getClassId(){ if (RectangleOneMultiDimension.classId == null) {RectangleOneMultiDimension.classId = Uuid.fromString("315CF45E-A88C-3DC8-6D17-B6A0CB9BE307"); }return RectangleOneMultiDimension.classId; } private double preservedDistance; public RectangleOneMultiDimension(){} public RectangleOneMultiDimension($MultiDimension obj){ super(obj); } public RectangleOneMultiDimension(MultiDimension obj, Uuid uuid){ super(obj, uuid); } public RectangleOneMultiDimension(Uuid uuid){ super(uuid); } @Override public boolean hasSameKey(RectangleOneMultiDimension obj) { int i=0; while(( i < this.numberOfDimensions()) && (this.getOrigin(i) == obj.getOrigin(i))){ i++; }return i == this.numberOfDimensions(); }@Override public KeyStructure<RectangleOneMultiDimension> getKeyStructure() { return rectangleOneMultiDimensionStructure; } @Override public boolean pullKey(byte[] array, int position) { PullPage pull = new PullPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ this.setOrigin(i, pull.pullDouble()); this.setExtension(i, pull.pullDouble()); } return true; } @Override public void pushKey(byte[] array, int position){ PushPage push = new PushPage(array, position); for (int i = 0; i < this.numberOfDimensions(); i++){ push.pushDouble(this.getOrigin(i)); push.pushDouble(this.getExtension(i)); } } @Override public int sizeOfKey() { return Page.sizeOfDouble * 2 * this.numberOfDimensions();} @Override public double getOrigin(int axis){ switch(axis){ case 0: return getValue1(); case 1: return getValue2(); case 2: return getValue3()[0]; case 3: return getValue3()[1]; case 4: return getValue3()[2]; case 5: return getValue4(); case 6: return getValue5(); default: return 0; } } @Override public void setOrigin(int axis, double value){ switch(axis){ case 0: setValue1(value); break; case 1: setValue2(value); break; case 2: getValue3()[0] = value; break; case 3: getValue3()[1] = value; break; case 4: getValue3()[2] = value; break; case 5: setValue4(value); break; case 6: setValue5(value); break; } } @Override public int numberOfDimensions(){ return 7;} @Override public double getExtension(int axis){ switch(axis){ case 0: return getValueExtension1(); case 1: return getValueExtension2(); case 2: return getValueExtension3()[0]; case 3: return getValueExtension3()[1]; case 4: return getValueExtension3()[2]; case 5: return getValueExtension4(); case 6: return getValueExtension5(); default: return 0; } } @Override public void setExtension(int axis, double value){ switch(axis){ case 0: setValueExtension1(value); break; case 1: setValueExtension2(value); break; case 2: getValueExtension3()[0] = value; break; case 3: getValueExtension3()[1] = value; break; case 4: getValueExtension3()[2] = value; break; case 5: setValueExtension4(value); break; case 6: setValueExtension5(value); break; } } @Override public double getPreservedDistance() { return this.preservedDistance; } @Override public void setPreservedDistance(double distance) { this.preservedDistance = distance; } @Override public double distanceTo(RectangleOneMultiDimension obj){ return DistanceUtil.euclidean(this, obj); } } 